{"version":3,"sources":["images/logo.PNG","globals.js","../node_modules/peerjs/dist sync","components/patient/layouts/PatientDoctorSearch.js","components/patient/layouts/AppointmentRow.js","redux/actions/patientActions.js","redux/actions/types.js","components/patient/layouts/PatientCurrentAppointments.js","components/patient/layouts/PatientHeader.js","components/patient/pages/PatientDashboard.js","components/doctor/layouts/DoctorHeader.js","redux/actions/doctorActions.js","components/doctor/layouts/SessionRow.js","components/doctor/layouts/DoctorUpcomingSessions.js","redux/actions/sessionActions.js","redux/actions/doctorClinicActions.js","components/doctor/layouts/DoctorSessionBuilder.js","components/doctor/pages/DoctorDashboard.js","redux/actions/authActions.js","components/doctor/pages/clinic/Video.js","components/doctor/layouts/DoctorNotepad.js","components/doctor/pages/clinic/DoctorClinic.js","components/patient/clinic/PatientClinic.js","components/patient/layouts/SessionResultRows.js","components/patient/pages/PatientSearchDoctor.js","components/general/Landing.js","history.js","components/login/PatientLogin.js","components/login/DoctorLogin.js","redux/reducers/authReducer.js","redux/reducers/appointmentsReducer.js","redux/reducers/patientReducer.js","redux/reducers/doctorReducer.js","redux/reducers/doctorClinicReducer.js","redux/reducers/sessionsReducer.js","redux/reducers/index.js","redux/store.js","components/routeExtensions/LoggedInPatientRoute.js","components/routeExtensions/LoggedInDoctorRoute.js","components/clinic/Room.js","components/clinic/Clinic.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","serverUrl","socketUrl","webpackEmptyContext","req","e","Error","code","keys","resolve","id","PatientDoctorSearch","useState","specialization","setSpecialization","doctorName","setDoctorName","className","Form","Group","controlId","Label","Control","type","placeholder","onChange","target","value","as","Button","params","doctor","to","pathname","state","AppointmentRow","props","date","Date","appointment","sessionDetails","doctorDetails","name","getDate","getMonth","getFullYear","getHours","getMinutes","completed","variant","getPatientAppointments","patientId","dispatch","a","fetch","then","res","json","appointments","payload","catch","err","alert","logPatientOut","connect","patient","patientAppointments","appointmentsRows","console","log","forEach","push","key","_id","Table","striped","bordered","hover","map","appointmentRow","Navbar","bg","Brand","href","Nav","onClick","setCurrentSessionActive","username","activeSession","authenticated","currentAppointment","inSession","nextAppointment","patientCurrentAppointments","setPatientCurrentAppointments","nextAppointmentDateTime","setNextAppointmentDateTime","activeSessionAvailable","appointmentLink","setAppointmentLink","useEffect","patient_id","temp_nadt","getNextAppointmentDateTime","getAppointmentLink","putInSession","sortedByDate","slice","sort","b","filter","data","thisDate","length","today","thisMonth","thisYear","timeRemaining","daysRemaining","Math","floor","parse","Container","logDoctorOut","SessionRow","session","patientsCount","doctorId","items","sessions","fetchDoctorSessions","result","sessionData","sessionsRows","appointmentCount","sessionRow","clinicNextPatient","sessionId","setDate","time","setTime","number","setNumber","val","multiple","undefined","sessiondate","dateString","givenDate","timeParts","match","isoDate","toISOString","method","headers","body","JSON","stringify","dateTime","max_patients","success","clinic","setDoctorInSession","setUserDoctor","sessionToday","sessionTodayVals","currentlyActiveSession","hoursToNext","setHoursToNext","enterSessionButton","setEnterSessionButton","currentAppointmentLink","setCurrentAppointmentLink","setCurrentlyActiveSession","calcHoursToNextSession","setupAppointments","sessionDate","month","sessionMonth","getTime","sessionTime","filterAndSortAppointments","role","appointmentList","list","patient_number","Video","playsInline","muted","ref","stream","autoPlay","style","border","width","height","DoctorNotepad","dropDown","useRef","input","addButton","searchMedicineValue","setSearchMedicineValue","medication","medicationRows","setMedicationRows","medicines","setMedicines","medicineList","setMedicineList","confirmButton","handleConfirm","bottomButton","setBottomButton","fetchMedicineList","getMedsList","checkValidMeds","med","ans","m","changeValue","index","current","handleRemove","getRows","setSearchValue","Object","k","v","plaxeholder","h","toggleButtonType","innerText","backgroundColor","filterFunction","i","toUpperCase","getElementsByTagName","textContent","indexOf","display","preventDefault","classList","toggle","toggleFunction","onKeyUp","dosage","times","beforeMeal","size","patientVideo","history","useHistory","setStream","receivingCall","callAccepted","userVideo","socket","currentSessionId","session_id","currentPatientNumber","setNextAppointment","connectToNextPatient","io","navigator","mediaDevices","getUserMedia","video","audio","srcObject","emit","on","appointmentDetails","next_appointment","peer","yourVid","otherVid","incomingCall","caller","doctorSessionId","patientPeer","Peer","host","port","appointment_id","call","answer","divStyle","mappedSessions","booked","patient_limit","available","bookSession","PatientSearchDoctor","searchDoctors","searchResults","setSearchResults","sr","doctorsFound","location","setDoctorSearchResults","doctorFound","Card","Body","doctorSessions","Landing","src","logo","alt","createBrowserHistory","mapDispatchToProps","authenticatePatientLogin","email","password","userIsValid","patientDetails","unauthenticatePatientLogin","setEmail","setPassword","document","reload","Text","Check","label","logDoctorIn","setDoctorId","initialState","userType","currentsessionId","currentPatientId","combineReducers","auth","action","LOCATION_CHANGE","currentSessionDetails","middleware","thunk","persistConfig","storage","persistedReducer","persistReducer","rootReducer","Component","component","otherProps","theComponent","render","setPeers","socketRef","peersRef","roomID","otherVideo","users","peers","userID","userToSignal","callerID","initiator","trickle","config","iceServers","urls","signal","createPeer","peerID","incomingSignal","addPeer","find","p","comp","App","store","createStore","compose","applyMiddleware","persistor","persistStore","configureStore","loading","exact","path","PatientLogin","PatientDashboard","PatientClinic","DoctorLogin","DoctorDashboard","DoctorClinic","Room","Clinic","Boolean","window","hostname","ReactDOM","StrictMode","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.6a44d53c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.a8f30753.PNG\";","const serverUrl = \"\"\r\n\r\nconst socketUrl = \"\"\r\n\r\nexports.serverUrl = serverUrl\r\nexports.socketUrl = socketUrl","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 153;","import React, {useState} from 'react'\r\nimport  Button from 'react-bootstrap/Button'\r\nimport  Form from 'react-bootstrap/Form'\r\nimport {Link } from 'react-router-dom'\r\n\r\nexport default function PatientDoctorSearch() {\r\n\r\n    let [specialization, setSpecialization] = useState(\"Psychiatrist\")\r\n    let [doctorName, setDoctorName] = useState(\"\")\r\n\r\n    return (\r\n        <div className=\"patient-search-doctor\">\r\n\r\n            <h2>Make an appointment</h2>\r\n            <br></br>\r\n            <hr></hr>\r\n            <br></br>\r\n            <Form>\r\n            <Form.Group controlId=\"doctorSearchForm.doctorName\">\r\n                <Form.Label>Doctor Name:</Form.Label>\r\n                <Form.Control type=\"text\" placeholder=\"E.g. Jane Doe\" onChange={e => { setDoctorName(e.target.value) }}></Form.Control>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"doctorSearchForm.selectSpecialization\">\r\n                <Form.Label>Doctor's Specialization</Form.Label>\r\n                <Form.Control as=\"select\" onChange={e => { setSpecialization(e.target.value) }}>\r\n                    <option>Psychiatrist</option>\r\n                    <option>Child Psychiatrist</option>\r\n                    <option>Psychologist</option>\r\n                    <option>Child Psychologist</option>\r\n                    <option>Therapist</option>\r\n                </Form.Control>\r\n            </Form.Group>\r\n            \r\n            <Button>\r\n                 <Link params={{ doctor:doctorName, specialization: specialization}}\r\n                   to={{\r\n                       pathname: \"/patients/searchDoctor\",\r\n                       state: {\r\n                           doctorName: doctorName,\r\n                           specialization: specialization\r\n                           }\r\n                        }\r\n                    }\r\n                           >\r\n                    Search\r\n                 </Link> \r\n            </Button>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Button } from 'react-bootstrap'\r\n\r\nexport default function AppointmentRow(props) {\r\n\r\n    var date = new Date(props.appointment.sessionDetails.date);\r\n    \r\n\r\n    return (\r\n        <tr>\r\n            {/* <td> {props.appointment._id} </td> */}\r\n            <td> Dr. { props.appointment.doctorDetails.name } </td>\r\n            <td>  { props.appointment.doctorDetails.specialization } </td>\r\n            <td> {date.getDate()}/{date.getMonth()}/{date.getFullYear()} </td>\r\n            <td> {date.getHours()}:{date.getMinutes()}  </td>\r\n            <td className=\"cancel-appointment-td\" > { props.appointment.completed ? \"\" :  <Button variant=\"danger\">Cancel Appointment</Button>} </td>\r\n        </tr>\r\n    )\r\n}\r\n","import { AUTHENTICATE_PATIENT, UNAUTHENTICATE_PATIENT, PUT_PATIENT_IN_SESSION, FETCH_PATIENT_APPOINTMENTS } from '../actions/types';\r\nimport { serverUrl } from '../../globals'\r\n\r\n\r\nexport function authenticatePatient() {\r\n  return {\r\n    type: AUTHENTICATE_PATIENT,\r\n  };\r\n}\r\n\r\n\r\nexport function unauthenticatePatient() {\r\n  return {\r\n    type: UNAUTHENTICATE_PATIENT,\r\n  };\r\n}\r\n\r\n\r\nexport function getPatientAppointments (patientId) {\r\n  return async function (dispatch) {\r\n    fetch(`/patient/appointments/${patientId}`)\r\n      .then(res => res.json())\r\n      .then( appointments => {\r\n\r\n        dispatch({\r\n            type : FETCH_PATIENT_APPOINTMENTS,\r\n            payload : appointments\r\n        }) \r\n      } )\r\n      .catch( err => { alert(\"patient appointment error\" + err) } )\r\n  }\r\n}\r\n\r\n\r\n  export function logPatientOut () {\r\n    return async function (dispatch) {\r\n      dispatch(\r\n        {\r\n          type : UNAUTHENTICATE_PATIENT\r\n        }\r\n      )\r\n    }\r\n  }\r\n\r\n  export function logPatientIn (email, password) {\r\n    return async function (dispatch) {\r\n        fetch(`${serverUrl}/patient/auth`,\r\n         {\r\n           method: 'POST',\r\n           headers: {\r\n            'Content-Type': 'application/json'\r\n            // 'Content-Type': 'application/x-www-form-urlencoded',\r\n          },\r\n          body : JSON.stringify({\r\n            patientId : email,\r\n            password: password\r\n          })\r\n         }) \r\n            .then(res => res.json())\r\n            .then( result => {\r\n              \r\n              if (result.userIsValid === true) {\r\n                dispatch(\r\n                  {\r\n                      type: AUTHENTICATE_PATIENT,\r\n                      payload : {\r\n                        username : email,\r\n                        password : password,\r\n                        authenticated: true,\r\n                        patientDetails : result.patientDetails\r\n                      }\r\n                  }\r\n                  )\r\n              }\r\n\r\n        } ).catch(err => { console.log(\"Error in Patient Actions\" + err) })      \r\n    }\r\n}\r\n\r\n\r\nexport function setCurrentSessionActive (username, activeSession) {\r\n  return async function (dispatch) {\r\n    dispatch(\r\n      {\r\n        type : PUT_PATIENT_IN_SESSION,\r\n        payload : {\r\n          username: username,\r\n          authenticated: true,\r\n          currentAppointment: activeSession,\r\n          inSession : true\r\n        }\r\n      }\r\n    )\r\n}\r\n}","export const AUTHENTICATE_PATIENT = 'AUTHENTICATE_PATIENT'\r\nexport const AUTHENTICATE_DOCTOR = 'AUTHENTICATE_DOCTOR'\r\nexport const UNAUTHENTICATE_PATIENT = 'UNAUTHENTICATE_PATIENT'\r\nexport const UNAUTHENTICATE_DOCTOR = 'UNAUTHENTICATE_DOCTOR'\r\n\r\nexport const PUT_PATIENT_IN_SESSION = 'PUT_PATIENT_IN_SESSION'\r\nexport const FETCH_PATIENT_APPOINTMENTS = 'FETCH_PATIENT_APPOINTMENTS' \r\n\r\nexport const START_DOCTOR_SESSION = 'START_DOCTOR_SESSION'\r\nexport const END_DOCTOR_SESSION = 'END_DOCTOR_SESSION'\r\n\r\nexport const SET_USER_DOCTOR = 'SET_USER_DOCTOR'\r\n\r\nexport const FETCH_DOCTOR_APPOINTMENTS_TODAY = 'FETCH_DOCTOR_APPOINTMENTS_TODAY'\r\nexport const FETCH_DOCTOR_SESSIONS = 'FETCH_DOCTOR_SESSIONS'\r\n\r\nexport const CLINIC_NEXT_PATIENT = 'CLINIC_NEXT_PATIENT'","import React, {useEffect} from 'react'\r\nimport Table from 'react-bootstrap/Table';\r\nimport AppointmentRow from './AppointmentRow';\r\nimport {getPatientAppointments} from '../../../redux/actions/patientActions'\r\nimport {connect} from 'react-redux'\r\n\r\nfunction PatientCurrentAppointments(props) {\r\n    \r\n    // useEffect(() => {\r\n    //     // props.getPatientAppointments(props.patient.patient_id);\r\n    // }, [])\r\n\r\n\r\n    var appointments = props.patient.patientAppointments;\r\n    let appointmentsRows = []\r\n\r\n    console.log(props)\r\n\r\n    const setAppointmentRows = () => {\r\n        appointments.forEach(\r\n            appointment => {\r\n                appointmentsRows.push(<AppointmentRow key={appointment._id} appointment={appointment} />)\r\n            }\r\n        )\r\n    }\r\n\r\n    setAppointmentRows()\r\n    \r\n\r\n    return (\r\n        <div>\r\n            <h4>\r\n\r\n            Your Current Appointments\r\n            </h4>\r\n\r\n            <Table striped bordered hover>\r\n                <thead>\r\n                    <tr>\r\n                    {/* <th>id</th> */}\r\n                    <th>Doctor</th>\r\n                    <th>Specialization</th>\r\n                    <th>Date</th>\r\n                    <th>Time</th>\r\n                    <th></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {appointmentsRows.map( appointmentRow => {\r\n                       return appointmentRow\r\n                    } )}\r\n                </tbody>\r\n            </Table>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    patient : state.patient\r\n})\r\n\r\nexport default connect (mapStateToProps, { getPatientAppointments }) (PatientCurrentAppointments);\r\n","import React from 'react'\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Nav from 'react-bootstrap/Nav'\r\n\r\nimport { connect } from 'react-redux'\r\nimport { logPatientOut } from '../../../redux/actions/patientActions'\r\n\r\nfunction PatientHeader(props) {\r\n\r\n    const logOut = () => {\r\n        props.logPatientOut();\r\n    }\r\n\r\n    return (\r\n        <Navbar bg=\"light\" variant=\"light\">\r\n        <Navbar.Brand href=\"#home\" className=\"navbar-logo-psyconnect\"> PsyconnectME - Patient </Navbar.Brand>\r\n        <Nav className=\"mr-auto\">\r\n          \r\n        </Nav>\r\n        <Button variant=\"dark\" onClick={logOut}>\r\n            Sign Out    \r\n        </Button>\r\n      </Navbar>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    patient : state.patient\r\n})\r\n\r\nexport default connect (mapStateToProps, { logPatientOut })(PatientHeader);\r\n","import React, { useState } from \"react\";\r\nimport PatientDoctorSearch from \"../layouts/PatientDoctorSearch\";\r\nimport PatientCurrentAppointments from \"../layouts/PatientCurrentAppointments\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport PatientHeader from \"../layouts/PatientHeader\";\r\nimport {\r\n  setCurrentSessionActive,\r\n  logPatientOut,\r\n  getPatientAppointments,\r\n} from \"../../../redux/actions/patientActions\";\r\nimport { useEffect } from \"react\";\r\n\r\nfunction PatientDashBoard(props) {\r\n\r\n\r\n  let [patientCurrentAppointments, setPatientCurrentAppointments] = useState(\r\n    null\r\n  );\r\n  let [nextAppointmentDateTime, setNextAppointmentDateTime] = useState();\r\n\r\n  const defaultHourLimit = 24;\r\n  let activeSessionAvailable = false;\r\n  let activeSession = null;\r\n  let nextAppointment;\r\n\r\n  const [appointmentLink, setAppointmentLink] = useState(null);\r\n\r\n  useEffect(() => {\r\n    props.getPatientAppointments(props.patient.patient_id);\r\n    setPatientCurrentAppointments(<PatientCurrentAppointments />);\r\n\r\n    const temp_nadt = getNextAppointmentDateTime();\r\n    setNextAppointmentDateTime(temp_nadt);\r\n\r\n    getAppointmentLink();\r\n\r\n    // activeSessionAvailable = false;\r\n  }, []);\r\n\r\n  // put the patient in a session with the doctor using the session id\r\n  const putInSession = () => {\r\n    props.setCurrentSessionActive(props.patient.username, activeSession);\r\n  };\r\n\r\n  const getNextAppointmentDateTime = () => {\r\n    let appointments = props.patient.patientAppointments;\r\n    //sort the appointments array by date\r\n    let sortedByDate = appointments\r\n      .slice()\r\n      .sort(\r\n        (a, b) =>\r\n          new Date(a.sessionDetails.date) - new Date(b.sessionDetails.date)\r\n      );\r\n\r\n    // filter out past appointments\r\n    sortedByDate = sortedByDate.filter((data) => {\r\n      let thisDate = new Date();\r\n      let date = new Date(data.sessionDetails.date);\r\n      return (\r\n        date >= thisDate ||\r\n        (date.getFullYear() == thisDate.getFullYear() &&\r\n          date.getMonth() == thisDate.getMonth() &&\r\n          date.getDate() == thisDate.getDate() &&\r\n          thisDate.getHours() - date.getHours() <= defaultHourLimit)\r\n      );\r\n    });\r\n\r\n    if (sortedByDate.length > 0)\r\n      nextAppointment = new Date(sortedByDate[0].sessionDetails.date);\r\n    else return `No upcoming appointments`;\r\n\r\n    let date = new Date();\r\n    let today = date.getDate();\r\n    let thisMonth = date.getMonth();\r\n    let thisYear = date.getFullYear();\r\n\r\n    // check if the appointment is today\r\n    if (\r\n      nextAppointment.getFullYear() == thisYear &&\r\n      nextAppointment.getMonth() == thisMonth &&\r\n      nextAppointment.getDate() == today\r\n    ) {\r\n      // get the number of hours until the appointment\r\n      let timeRemaining = nextAppointment.getHours() - date.getHours();\r\n      activeSessionAvailable = timeRemaining < 1;\r\n      activeSession = timeRemaining >= 1 ? null : sortedByDate[0];\r\n      return ` Youra next appointment is in less than ${\r\n        timeRemaining > 1 ? timeRemaining : 1\r\n      } hour(s) `;\r\n    } else {\r\n      // calculate days\r\n      let daysRemaining = Math.floor(\r\n        (Date.parse(nextAppointment) - Date.parse(new Date())) / 86400000\r\n      );\r\n      return `Your next appointment is in ${daysRemaining} day(s) `;\r\n    }\r\n  };\r\n\r\n  const getAppointmentLink = () => {\r\n    if (activeSessionAvailable){\r\n        setAppointmentLink(\r\n          <Link\r\n            to={\"/room/\" + activeSession._id}\r\n            className=\"nav-link\"\r\n          >\r\n            <Button variant=\"success\" onClick={putInSession}>\r\n              Call Doctor\r\n            </Button>\r\n          </Link>\r\n        );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <PatientHeader />\r\n      <br />\r\n      {patientCurrentAppointments\r\n        ? patientCurrentAppointments\r\n        : \"No Appointments\"}\r\n      <br />\r\n      <hr />\r\n      <br></br>\r\n\r\n      <hr />\r\n      <h3> {nextAppointmentDateTime} </h3>\r\n\r\n      {appointmentLink}\r\n\r\n      <br></br>\r\n      <hr />\r\n\r\n      <PatientDoctorSearch />\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  patient: state.patient,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  setCurrentSessionActive,\r\n  logPatientOut,\r\n  getPatientAppointments,\r\n})(PatientDashBoard);\r\n","import React from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport Navbar from 'react-bootstrap/Navbar'\r\n\r\nimport { logDoctorOut } from '../../../redux/actions/doctorActions'\r\nimport { connect } from 'react-redux'\r\n\r\nfunction DoctorHeader(props) {\r\n\r\n    return (\r\n        <div>\r\n        <Navbar bg=\"light\" variant=\"light\">\r\n    <Navbar.Brand href=\"#home\" className=\"navbar-logo-psyconnect\"> PsyconnectME - Dr. { props.doctorDetails.name }  </Navbar.Brand>\r\n        <Nav className=\"mr-auto\">\r\n          \r\n        </Nav>\r\n        <Button variant=\"dark\" onClick={ props.logDoctorOut }>\r\n            Sign Out    \r\n        </Button>\r\n      </Navbar>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps =  state  => ({\r\n    doctorDetails : state.doctor.doctorDetails\r\n}) \r\n\r\nexport default connect (mapStateToProps, {logDoctorOut}) (DoctorHeader)","import { AUTHENTICATE_DOCTOR, UNAUTHENTICATE_DOCTOR, START_DOCTOR_SESSION, END_DOCTOR_SESSION, SET_USER_DOCTOR } from '../actions/types'\r\nimport { serverUrl } from '../../globals'\r\n\r\nexport function logDoctorIn(doctorId, password) {\r\n    return async function (dispatch) {\r\n        fetch(`${serverUrl}/doctors/auth`,\r\n         {\r\n           method: 'POST',\r\n           headers: {\r\n            'Content-Type': 'application/json'\r\n            // 'Content-Type': 'application/x-www-form-urlencoded',\r\n          },\r\n          body : JSON.stringify({\r\n            doctorId : doctorId,\r\n            password: password\r\n          })\r\n         }) \r\n            .then(res => res.json())\r\n            .then( result => {\r\n\r\n              \r\n              if (result.userIsValid === true) {\r\n                dispatch(\r\n                  {\r\n                      type: AUTHENTICATE_DOCTOR,\r\n                      payload : {\r\n                        username : doctorId,\r\n                        authenticated: true,\r\n                        doctorDetails : result.doctorDetails\r\n                      }\r\n                  }\r\n                  )\r\n                dispatch (\r\n                  {\r\n                    type : SET_USER_DOCTOR\r\n                  }\r\n                )\r\n              }\r\n\r\n        } ).catch(err => { console.log(err) })      \r\n    }\r\n}\r\n\r\nexport function logDoctorOut () {\r\n  return async function (dispatch) {\r\n    dispatch (\r\n      {\r\n        type: UNAUTHENTICATE_DOCTOR,\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n// DOCTOR SESSIONS\r\n\r\nexport function setDoctorInSession (session) {\r\n  return async function (dispatch) {\r\n    dispatch (\r\n      {\r\n        type : START_DOCTOR_SESSION,\r\n        payload : session\r\n      }\r\n    ) \r\n  }\r\n}\r\n\r\n\r\n\r\nexport function setDoctorOutSession () {\r\n  return async function (dispatch) {\r\n    dispatch (\r\n      {\r\n        type : END_DOCTOR_SESSION\r\n      }\r\n    ) \r\n  }\r\n}","import React from 'react'\r\n\r\nexport default function SessionRow(props) {\r\n\r\n    const date = new Date(props.session.date)\r\n\r\n\r\n    return (\r\n        <tr>\r\n            <td>\r\n                {props.session._id}\r\n            </td>\r\n            <td>\r\n                {props.session.date}\r\n            </td>\r\n            <td>\r\n                {date.getHours()}:{date.getMinutes()}\r\n            </td>\r\n            <td>\r\n                {props.patientsCount}\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport Table from 'react-bootstrap/Table'\r\nimport SessionRow from './SessionRow';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { fetchDoctorSessions } from '../../../redux/actions/sessionActions';\r\n\r\nfunction DoctorUpcomingSessions(props) {\r\n\r\n    useEffect(() => {\r\n         props.fetchDoctorSessions(props.doctorId)\r\n        }, [])\r\n        \r\n    var sessionsRows = [];\r\n    \r\n\r\n    const setSessionsRows = () => {\r\n        sessionsRows = props.sessions.map( (session) => {\r\n            if (new Date(session.session.date) >= new Date()) \r\n                return <SessionRow patientsCount={ session.appointmentCount } session={session.session} />\r\n        } );\r\n    }\r\n    \r\n    if (props.sessions) {\r\n        setSessionsRows();\r\n    }\r\n\r\n    return (\r\n        <Table>\r\n            <thead>\r\n                <th>\r\n                    Session Id\r\n                </th>\r\n                <th>\r\n                    Date\r\n                </th>\r\n                <th>\r\n                    Starting Time\r\n                </th>\r\n                <th>\r\n                    No. of Patients\r\n                </th>\r\n            </thead>\r\n            <tbody>\r\n                {\r\n                    sessionsRows.map( sessionRow => {\r\n                        return sessionRow\r\n                    } )\r\n                }\r\n            </tbody>\r\n        </Table>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    doctorId : state.doctor.doctorDetails._id,\r\n    appointments : state.appointments.items,\r\n    sessions : state.session.sessions\r\n})\r\n\r\nexport default connect (mapStateToProps, { fetchDoctorSessions } )(DoctorUpcomingSessions);\r\n","import { FETCH_DOCTOR_SESSIONS } from '../actions/types'\r\nimport {serverUrl} from '../../globals'\r\n\r\n\r\nexport function fetchDoctorSessions (doctorId) {\r\n    return async function (dispatch) {\r\n        fetch(`${serverUrl}/doctors/sessions/${doctorId}`) \r\n            .then(res => res.json())\r\n            .then( result => {\r\n                dispatch(\r\n                {\r\n                    type: FETCH_DOCTOR_SESSIONS,\r\n                    payload : result.sessionData\r\n                }\r\n            )\r\n        } ).catch(err => { console.log(err) })      \r\n    }\r\n}","import { CLINIC_NEXT_PATIENT } from \"./types\"\r\nimport { serverUrl } from '../../globals'\r\n\r\n\r\n\r\nexport function clinicNextPatient (sessionId) {\r\n    return async function (dispatch) {\r\n        // get the doctor's list of appointments\r\n        fetch(`${serverUrl}/doctors/appointments/next/${sessionId}`)\r\n        .then( res => res.json() )\r\n        .then( result => {\r\n            \r\n            // filter out completed appointments\r\n            result.appointment = result.appointment.filter(a => {\r\n                return !a.completed\r\n            })\r\n\r\n            dispatch({\r\n                type : CLINIC_NEXT_PATIENT,\r\n                payload : result\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\n","import React, {useState} from 'react'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { connect } from 'react-redux';\r\nimport { serverUrl } from '../../../globals'\r\nfunction DoctorSessionBuilder(props) {\r\n    \r\n    const [date, setDate] = useState();\r\n    const [time, setTime] = useState();\r\n    const [number, setNumber] = useState(25);\r\n\r\n    // NOTE -- Doing validation on the frontend needs to be changed when I have time\r\n\r\n    const createSession =()=> {\r\n\r\n        // check for undefined date or time\r\n        if (date === undefined || time === undefined) {\r\n            alert(\"Invalid Date or Time\")\r\n            return\r\n        }\r\n\r\n        // check current sessions if there is already a session on that day\r\n        const currentSessions = props.sessions.sessions\r\n        currentSessions.forEach(session => {\r\n            let sessiondate = new Date(session.session.date)\r\n            let dateString = `${sessiondate.getFullYear()}-${sessiondate.getMonth()}-${sessiondate.getDate()}`\r\n\r\n            if (date == dateString) {\r\n                alert(\"There is already a session on that day\")\r\n                return\r\n            }\r\n             \r\n        }) \r\n\r\n        // check date to ensure the date has not passed already\r\n        const today = new Date()\r\n        const givenDate = new Date(date)\r\n        \r\n        if (today > givenDate  && ( (today.getDate() != givenDate.getDate()) && (today.getMonth() != givenDate.getMonth()) && (today.getFullYear() != givenDate.getFullYear()) )) {\r\n            alert('The date has already passed');\r\n            return\r\n        }\r\n\r\n        const timeParts = [...time.match(/(\\d{2}):(\\d{2})/)];\r\n\r\n        let theDate =  new Date(\r\n            givenDate.getFullYear(),\r\n            givenDate.getMonth() ,\r\n            givenDate.getDate(),\r\n            timeParts[1],\r\n            timeParts[2]\r\n        ); \r\n        //Create an ISOString to store in MongoDB database  \r\n        var isoDate = theDate.toISOString()\r\n\r\n\r\n        // send data to the server\r\n        fetch(`${serverUrl}/doctors/sessions/${props.doctor.doctorDetails._id}`,\r\n            {\r\n                method: 'post',\r\n                headers : {\r\n                    'Content-type' : 'application/json'\r\n                },\r\n                body : JSON.stringify({\r\n                    dateTime : isoDate,\r\n                    max_patients : number\r\n                })\r\n            }\r\n        )\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            if (res.success === true) \r\n                alert(\"session added\")\r\n            else \r\n                alert(\"Error creating session, check date and time\") \r\n        })\r\n        .catch(err => { alert('Error in creating session' ) }) \r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Form>\r\n                <Form.Group controlId=\"sessionBuilder.DateSelect\" >\r\n                    <Form.Label>Date: </Form.Label>\r\n                    <Form.Control onChange={ val => setDate(val.target.value) } type=\"date\">\r\n                    </Form.Control>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"sessionBuilder.ControlSelect2\">\r\n                    <Form.Label>Time: </Form.Label>\r\n                    <Form.Control onChange={ val => setTime(val.target.value) } type=\"time\" multiple>\r\n                    </Form.Control>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"sessionBuilder.ControlTextarea1\">\r\n                    <Form.Label>Maximum number of patients:</Form.Label>\r\n                    <Form.Control onChange={ val => setNumber(val.target.value) } type=\"number\" placeholder=\"25\" /> \r\n                </Form.Group>\r\n                <Button variant=\"primary\"  onClick={createSession}>\r\n                    Create\r\n                </Button>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    doctor : state.doctor,\r\n    sessions : state.session\r\n})\r\n\r\nexport default connect ( mapStateToProps, {} )(DoctorSessionBuilder)\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport DoctorHeader from \"../layouts/DoctorHeader\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport DoctorUpcomingSessions from \"../layouts/DoctorUpcomingSessions\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { setDoctorInSession } from \"../../../redux/actions/doctorActions\";\r\nimport { clinicNextPatient } from \"../../../redux/actions/doctorClinicActions\";\r\nimport { setUserDoctor } from \"../../../redux/actions/authActions\";\r\nimport DoctorSessionBuilder from \"../layouts/DoctorSessionBuilder\";\r\n\r\nfunction DoctorDashboard(props) {\r\n  let sessionToday = false;\r\n  let sessionTodayVals = null;\r\n  let currentlyActiveSession = null;\r\n  let currentSessionTime = null;\r\n\r\n  const [hoursToNext, setHoursToNext] = useState(\"No sessions today\");\r\n  const [enterSessionButton, setEnterSessionButton] = useState(null);\r\n  const [currentAppointmentLink, setCurrentAppointmentLink] = useState(null);\r\n  let currentAppointments= []\r\n\r\n  useEffect(() => {\r\n    setCurrentlyActiveSession();\r\n    calcHoursToNextSession();\r\n    if (currentlyActiveSession){\r\n      props.clinicNextPatient(currentlyActiveSession._id);\r\n      setupAppointments();\r\n    }\r\n  }, []);\r\n\r\n  const setCurrentlyActiveSession = () => {\r\n    // check all sessions today for a session that should already have started/ should start now\r\n    props.sessions.sessions.forEach((session) => {\r\n      let today = new Date().getDate();\r\n      let sessionDate = new Date(session.session.date).getDate();\r\n      let month = new Date().getMonth();\r\n      let sessionMonth = new Date(session.session.date).getMonth();\r\n\r\n      let time = new Date().getTime();\r\n      let sessionTime = new Date(session.session.date).getTime();\r\n\r\n      if (sessionDate === today && month == sessionMonth) {\r\n        // then we have a session today, calculate the time\r\n        sessionTodayVals = ` ${new Date(\r\n          session.session.date\r\n        ).getHours()}:${new Date(session.session.date).getMinutes()} `;\r\n        sessionToday = true;\r\n\r\n        if (sessionTime <= time) {\r\n          currentlyActiveSession = session.session;\r\n          props.setDoctorInSession(session.session);\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const setupAppointments = () => {\r\n    // set the doctor's current appointments in the component state\r\n    fetch(`/doctors/appointments/next/${currentlyActiveSession._id}`)\r\n    .then( res => res.json() )\r\n    .then( result => {\r\n        // filter out completed appointments\r\n        result.appointment = result.appointment.filter(a => {\r\n            return !a.completed\r\n        })\r\n\r\n        let appointments = filterAndSortAppointments(result.appointment)\r\n        currentAppointments = [...appointments]\r\n        // set the link variable, to connect to the appointment\r\n        if (appointments.length > 0) {\r\n          setCurrentAppointmentLink(\r\n            <Link to={\"/room/\" + appointments[0]._id}>\r\n              <Button role=\"doctor\">ENTER CLINIC</Button>\r\n            </Link>\r\n          );\r\n        }\r\n        \r\n    })\r\n    .catch(err => { console.log(err) })\r\n\r\n  };\r\n\r\n  const filterAndSortAppointments = (appointmentList) => {\r\n    // filter out completed appointments\r\n    let list = appointmentList.filter((appointment) => {\r\n      return !appointment.completed\r\n    });\r\n\r\n    // sort the filtered appointments by number\r\n\r\n    list = list.sort((a, b) => {\r\n      if (a.patient_number > b.patient_number) return 1;\r\n      else if (b.patient_number > a.patient_number) return -1;\r\n\r\n      return 0;\r\n    });\r\n\r\n    return list;\r\n  };\r\n\r\n  // calculates the number of hours to the next session\r\n  const calcHoursToNextSession = () => {\r\n    if (sessionToday) {\r\n      setHoursToNext(`Session today at ${sessionTodayVals}`);\r\n      if (currentlyActiveSession)\r\n        setEnterSessionButton(\r\n          <Button variant=\"success\" onClick={setDoctorInSession}>\r\n            {\" \"}\r\n            Enter Session\r\n          </Button>\r\n        );\r\n    } else {\r\n      setHoursToNext(\"No sessions today\");\r\n    }\r\n  };\r\n\r\n  const setDoctorInSession = () => {\r\n    props.clinicNextPatient(currentlyActiveSession._id);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <DoctorHeader />\r\n\r\n      <h3> Upcoming Sessions </h3>\r\n      <DoctorUpcomingSessions />\r\n      <hr />\r\n      <h2> Sessions </h2>\r\n      <h3> {hoursToNext} </h3>\r\n      <hr />\r\n\r\n      <Link to=\"/doctor/clinic\">{enterSessionButton}</Link>\r\n\r\n      {currentAppointmentLink}\r\n\r\n      {/* <Link to={currentAppointmentLink}>\r\n            <Button role=\"doctor\">ENTER CLINIC</Button>\r\n            </Link> */}\r\n      <hr />\r\n      <Button> Create a new Session </Button>\r\n\r\n      <DoctorSessionBuilder />\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  doctor: state.doctor,\r\n  sessions: state.session,\r\n  clinic: state.clinic,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  clinicNextPatient,\r\n  setDoctorInSession,\r\n  setUserDoctor,\r\n})(DoctorDashboard);\r\n","import { SET_USER_DOCTOR } from '../actions/types'\r\n\r\nexport function setUserDoctor (doctorId) {\r\n    return async function (dispatch) {\r\n        \r\n                dispatch(\r\n                {\r\n                    type: SET_USER_DOCTOR\r\n                }\r\n                )\r\n    \r\n}}","import React from 'react'\r\n\r\nexport default function Video(props) {\r\n\r\n    const style = {\r\n        border: \"1px solid blue\",\r\n        width: \"50%\",\r\n        height: \"50%\"\r\n    }\r\n\r\n    return (\r\n        <video playsInline muted ref={props.stream} autoPlay style={style}/>\r\n    )\r\n}\r\n","import React, { useRef, useState, useEffect } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nexport default function DoctorNotepad() {\r\n  const dropDown = useRef(null);\r\n  const input = useRef(null);\r\n  const addButton = useRef(null);\r\n\r\n  const [searchMedicineValue, setSearchMedicineValue] = useState({ value: \"\" });\r\n\r\n  const medication = useRef({});\r\n\r\n  const [medicationRows, setMedicationRows] = useState(null);\r\n  const [medicines, setMedicines] = useState(null);\r\n  const [medicineList, setMedicineList] = useState([]);\r\n\r\n  const confirmButton = <Button variant='warning' onClick={handleConfirm}> Confirm </Button>\r\n\r\n  const [bottomButton, setBottomButton] = useState(confirmButton)\r\n\r\n  useEffect(() => {\r\n    fetchMedicineList();\r\n  }, []);\r\n\r\n  const fetchMedicineList = () => {\r\n    fetch(\"/medicine/list\")\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        setMedicines(getMedsList(res));\r\n        setMedicineList(res);\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error fetching medicine data\" + err);\r\n      });\r\n  };\r\n\r\n  const fetchConditionsList = () => {\r\n    fetch(\"/conditions/list\")\r\n    .then((res) => res.json())\r\n    .then((res) => {\r\n      setMedicines(getMedsList(res));\r\n      setMedicineList(res);\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"Error fetching medicine data\" + err);\r\n    });\r\n  }\r\n\r\n  function toggleFunction(e) {\r\n    e.preventDefault();\r\n    dropDown.current.classList.toggle(\"show\");\r\n    toggleButtonType();\r\n  }\r\n\r\n  const handlePrescribe = (e) => {\r\n    if (checkValidMeds(input.current.value)) {\r\n      medication.current[input.current.value] = {\r\n        name: input.current.value,\r\n        dosage: 0,\r\n        times: 0,\r\n        beforeMeal: \"Before\",\r\n      };\r\n\r\n      setMedicationRows(getRows());\r\n    }\r\n  };\r\n\r\n  // check if the medicine exists in the records before adding it to the prescription\r\n  const checkValidMeds = (med) => {\r\n    let ans = false;\r\n    medicineList.forEach((m) => {\r\n      if (m.name == med) {\r\n        ans = true;\r\n      }\r\n    });\r\n    return ans;\r\n  };\r\n\r\n  // when the doctor changes a dosage/ time of a prescribed medicine\r\n  const changeValue = (e, med, index) => {\r\n    medication.current[med][index] = e.target.value;\r\n  };\r\n\r\n  const handleRemove = (med) => {\r\n    delete medication.current[med];\r\n    setMedicationRows(getRows());\r\n  };\r\n\r\n  const getMedsList = (list) => {\r\n    return list.map((med) => {\r\n      return (\r\n        <a\r\n          onClick={(e) => {\r\n            setSearchValue(e);\r\n          }}\r\n        >\r\n          {med.name}\r\n        </a>\r\n      );\r\n    });\r\n  };\r\n\r\n\r\n  // record the data in the database\r\n  // set the appointment status to completed\r\n  const saveMedicineData = () => {\r\n    fetch('/treatments/', {\r\n      method: 'post',\r\n      headers: {\r\n        'Content-type' : 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        medication: medication.current\r\n      })\r\n    })\r\n  }\r\n\r\n  // send the prescription to the patient\r\n  const sendPrescriptionToPatient = () => {\r\n\r\n  }\r\n  \r\n\r\n  const getRows = () => {\r\n    return Object.keys(medication.current).map((k, v) => {\r\n      // console.log(medication.current[k])\r\n      return (\r\n        <tr>\r\n          <td>{medication.current[k].name}</td>\r\n          <td>\r\n            <input\r\n              type=\"number\"\r\n              onChange={(e) => {\r\n                changeValue(e, k, \"dosage\");\r\n              }}\r\n              plaxeholder=\"0\"\r\n            ></input>\r\n          </td>\r\n          <td>\r\n            <select onChange={ e => { changeValue(e, k, 'beforeMeal') } } >\r\n              <option value=\"Before\">Before</option>\r\n              <option value=\"After\">After</option>\r\n            </select>\r\n          </td>\r\n          <td>\r\n            <input onChange={ e => { changeValue(e, k ,'times') } } type=\"number\"></input>\r\n          </td>\r\n          <td>\r\n            <Button\r\n              variant=\"danger\"\r\n              onClick={(h) => {\r\n                handleRemove(k);\r\n              }}\r\n            >\r\n              {\" \"}\r\n              x{\" \"}\r\n            </Button>\r\n          </td>\r\n        </tr>\r\n      );\r\n    });\r\n  };\r\n\r\n\r\n  // remove the confirm button\r\n  const handleConfirm = () => {\r\n    setBottomButton(null)\r\n    sendPrescriptionToPatient()\r\n    saveMedicineData()\r\n  }\r\n\r\n  const toggleButtonType = () => {\r\n    if (addButton.current.innerText === \"Add Medication\") {\r\n      addButton.current.innerText = \"Cancel\";\r\n      addButton.current.style.backgroundColor = \"red\";\r\n    } else {\r\n      addButton.current.innerText = \"Add Medication\";\r\n      addButton.current.style.backgroundColor = \"#3e8e41\";\r\n    }\r\n  };\r\n\r\n  function filterFunction(e) {\r\n    setSearchMedicineValue({ value: e.target.value });\r\n\r\n    var filter, a, i;\r\n    filter = searchMedicineValue.value.toUpperCase();\r\n    let div = dropDown.current;\r\n    a = div.getElementsByTagName(\"a\");\r\n    for (i = 0; i < a.length; i++) {\r\n      let txtValue = a[i].textContent || a[i].innerText;\r\n      if (txtValue.toUpperCase().indexOf(filter) > -1) {\r\n        a[i].style.display = \"\";\r\n      } else {\r\n        a[i].style.display = \"none\";\r\n      }\r\n    }\r\n  }\r\n\r\n  const setSearchValue = (e) => {\r\n    input.current.value = e.target.innerText;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"searchMedicine\">\r\n        <Form>\r\n          <div className=\"dropdown\">\r\n            <button\r\n              onClick={(e) => {\r\n                toggleFunction(e);\r\n              }}\r\n              className=\"dropbtn\"\r\n              ref={addButton}\r\n            >\r\n              Add Medication\r\n            </button>\r\n            <div ref={dropDown} className=\"dropdown-content\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Medication Name\"\r\n                value={searchMedicineValue.value}\r\n                onChange={filterFunction}\r\n                className=\"searchInput\"\r\n                ref={input}\r\n                onKeyUp={filterFunction}\r\n              />\r\n              {medicines}\r\n            </div>\r\n          </div>\r\n\r\n          <Button variant=\"primary\" onClick={handlePrescribe}>\r\n            PRESCRIBE\r\n          </Button>\r\n        </Form>\r\n      </div>\r\n      <div className=\"prescriptionTable\">\r\n        <Table striped bordered hover size=\"sm\">\r\n          <thead>\r\n            <tr>\r\n              <th>Medication</th>\r\n              <th>Dosage(mg)</th>\r\n              <th>Before/After Meals</th>\r\n              <th>Times/day </th>\r\n              <th> </th>\r\n            </tr>\r\n          </thead>\r\n          {/* map the values to the table body */}\r\n          <tbody>{medicationRows}</tbody>\r\n        </Table>\r\n      </div>\r\n      <div>\r\n        {bottomButton}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport io from \"socket.io-client\";\r\n// import Peer from \"peerjs\";\r\n\r\nimport Peer from \"peerjs\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Video from \"./Video\";\r\nimport { connect } from \"react-redux\";\r\nimport DoctorNotepad from \"../../layouts/DoctorNotepad\";\r\nimport { clinicNextPatient } from '../../../../redux/actions/doctorClinicActions'\r\n\r\nfunction DoctorClinic(props) {\r\n  const history = useHistory();\r\n\r\n  // const [yourID, setYourID] = useState(\"\");\r\n  const [users, setUsers] = useState({});\r\n  const [stream, setStream] = useState();\r\n  const [receivingCall, setReceivingCall] = useState(false);\r\n  const [caller, setCaller] = useState(\"\");\r\n  const [callerSignal, setCallerSignal] = useState();\r\n  const [callAccepted, setCallAccepted] = useState(false);\r\n\r\n  const userVideo = useRef();\r\n  let patientVideo;\r\n  const socket = useRef();\r\n\r\n  const currentAppointment = props.clinic.items.appointment[0]\r\n  const currentSessionId = currentAppointment.session_id;\r\n\r\n  const [currentPatientNumber, setCurrentPatientNumber] = useState(0);\r\n  const [nextAppointment, setNextAppointment] = useState(null);\r\n  // const [currentAppointment, setCurrentAppointment] = useState({});\r\n\r\n  useEffect(() => {\r\n    socket.current = io(\"/\");\r\n\r\n    // set the doctor's webcam visible to the doctor\r\n    navigator.mediaDevices\r\n      .getUserMedia({ video: true, audio: true })\r\n      .then((stream) => {\r\n        setStream(stream);\r\n        if (userVideo.current) {\r\n          userVideo.current.srcObject = stream;\r\n        }\r\n      });\r\n\r\n    // as the doctor enters the session. the list of\r\n    // appointments is sent tp the server\r\n    socket.current.emit(\"doctor joined\", {\r\n      session_id: currentSessionId,\r\n      appointments: props.clinic.items.appointment\r\n    });\r\n    \r\n\r\n    //executed when the next appointment is found or changed\r\n    socket.current.on(\"new next appointment\", (appointmentDetails) => {\r\n      console.log('new patient joined')\r\n      setNextAppointment(appointmentDetails);\r\n    });\r\n\r\n    // handling the addition of the first patient on entering the clinic\r\n    socket.current.on(\"firstpatient\", (appointment) => {\r\n      connectToNextPatient(appointment);\r\n    });\r\n\r\n    socket.current.on(\"nextPatient\", (data) => {\r\n      // setCurrentAppointment(data.next_appointment);\r\n      connectToNextPatient(data.next_appointment, data.peer);\r\n    });\r\n\r\n    socket.current.on(\"patientToConnect\", (data) => {\r\n      alert(\"fn -- patient to connect\");\r\n      connectToNextPatient(data.appointment, data.peer);\r\n    });\r\n  }, []);\r\n\r\n  function nextPatient() {\r\n    socket.current.emit(\"doctorEnterSession\", {\r\n      appointments: props.clinic.items.appointment,\r\n      // peer : thisPeer\r\n    });\r\n    socket.current.emit(\"callnextpatient\", currentSessionId);\r\n  }\r\n\r\n  function connectToNextPatient() {\r\n\r\n    setAppointmentComplete()\r\n\r\n    if (nextAppointment._id) history.push(`/room/${nextAppointment._id}`);\r\n    else {\r\n      alert(\"No more patients online\");\r\n      history.push(\"/doctor/\");\r\n    }\r\n  }\r\n\r\n  function setAppointmentComplete () {\r\n    fetch(`/appointments/complete/${currentAppointment._id}`)\r\n      .then( res => {\r\n        props.clinicNextPatient(currentSessionId)\r\n      } )\r\n      .catch(err => { console.log('error completing appointment') })\r\n  }\r\n\r\n  let UserVideo;\r\n  if (stream) {\r\n    UserVideo = <Video stream={userVideo} />;\r\n  }\r\n\r\n  // let patientVideo;\r\n  if (callAccepted) {\r\n    patientVideo = <Video stream={patientVideo} />;\r\n  }\r\n\r\n  let incomingCall;\r\n  if (receivingCall) {\r\n    incomingCall = <div></div>;\r\n  }\r\n  return (\r\n    <Container>\r\n      <h1> Dr.{props.doctor.name} Clinic </h1>\r\n      <h5> Current session id: {currentSessionId} </h5>\r\n      <h4>Patient number : {currentPatientNumber}</h4>\r\n      <div>\r\n        {/* {UserVideo}\r\n        {patientVideo} */}\r\n\r\n        <video muted ref={props.yourVid} autoPlay playsInline />\r\n        <video ref={props.otherVid} autoPlay playsInline />\r\n      </div>\r\n\r\n      <DoctorNotepad />\r\n\r\n      <div>\r\n        <hr></hr>\r\n        <h5>Connect to Next Patient</h5>\r\n        <Button variant=\"danger\" onClick={connectToNextPatient}>\r\n          Next Patient\r\n        </Button>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  doctor: state.doctor,\r\n  sessions: state.session, // remember to remove this if unnecessary\r\n  clinic: state.clinic,\r\n});\r\n\r\nexport default connect(mapStateToProps, {clinicNextPatient})(DoctorClinic);\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport io from \"socket.io-client\";\r\n// import Peer from \"peerjs\";\r\n\r\nimport Peer from 'peerjs'\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Video from \"./Video\";\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction PatientClinic(props) {\r\n  const [yourID, setYourID] = useState(\"\");\r\n  const [users, setUsers] = useState({});\r\n  const [stream, setStream] = useState();\r\n  const [receivingCall, setReceivingCall] = useState(false);\r\n  const [caller, setCaller] = useState(\"\");\r\n  const [callerSignal, setCallerSignal] = useState();\r\n  const [callAccepted, setCallAccepted] = useState(false);\r\n\r\n  const userVideo = useRef();\r\n  const partnerVideo = useRef();\r\n  const socket = useRef();\r\n\r\n  // console.log(props.patient)\r\n  let doctorSessionId = props.patient.currentAppointment.session_id;\r\n\r\n  // expose the patient's appointment id, for the doctor to connect to\r\n  const patientPeer = new Peer(props.patient.currentAppointment._id, {\r\n    host: \"/\",\r\n    port: \"3001\"\r\n  });\r\n  // alert(patientPeer.id)\r\n  const patientVideo = useRef();\r\n  const doctorVideo = useRef();\r\n\r\n\r\n  patientPeer.on('open', id => {\r\n      alert('dev -- opening patient peer')\r\n       // emit a message that the patient has entered the session\r\n       socket.current.emit(\"patientEnterClinic\",{ appointment: props.patient.currentAppointment, peer: null})\r\n\r\n  })\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    socket.current = io(\"/\");\r\n\r\n    // setting the user camera and mic\r\n    navigator.mediaDevices\r\n      .getUserMedia({ video: true, audio: true })\r\n      .then((stream) => {\r\n        setStream(stream);\r\n        if (userVideo.current) {\r\n          userVideo.current.srcObject = stream;\r\n        }\r\n      });\r\n\r\n    socket.current.emit('patient joined', { session_id: doctorSessionId, appointment: props.patient.currentAppointment })\r\n\r\n\r\n    socket.current.on(`requestPatientConnect`, (data) => {\r\n      if (data.appointment_id == props.patient.patientAppointments[0]._id) {\r\n        // connect the patient to the doctor\r\n        socket.current.emit(\"patientEnterClinic\", {\r\n          session_id: doctorSessionId,\r\n          appointment_id: data.appointment_id\r\n        });\r\n        // acceptDoctorCall();\r\n      }\r\n    });\r\n\r\n\r\n \r\n\r\n    // \r\n    socket.current.on('requestPeer', data => {\r\n      alert(`peer sent`)\r\n      if (data.appointment._id  == props.patient.currentAppointment._id)  {\r\n        socket.current.emit(\"respondWithPeer\", { peer: null, session_id: props.patient.currentAppointment.session_id})\r\n      }\r\n    })\r\n\r\n    socket.current.on('doctorIsIn', (peer) =>{\r\n      // thatPeer = peer\r\n    })\r\n\r\n  }, []);\r\n\r\n  patientPeer.on('call', (call) => {\r\n    call.answer(stream)\r\n    alert(`The doctor is calling you`)\r\n    // call.answer(stream);\r\n    // call.on(\"stream\", (userVideoStream) => {\r\n    //   partnerVideo.current.srcObject = userVideoStream;\r\n    //   partnerVideo.addEventListener(\"loadedmetadata\", () => {\r\n    //     partnerVideo.play();\r\n    //   });\r\n    // });\r\n  });\r\n\r\n\r\n  let UserVideo;\r\n  if (stream) {\r\n    UserVideo = <Video stream={userVideo} />;\r\n  }\r\n\r\n  let PartnerVideo;\r\n  if (callAccepted) {\r\n    PartnerVideo = <Video stream={partnerVideo} />;\r\n  }\r\n\r\n  let incomingCall;\r\n  if (receivingCall) {\r\n    incomingCall = (\r\n      <div>\r\n        <h1>{caller} is calling you</h1>\r\n        {/* <button onClick={acceptCall}>Accept</button> */}\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <Container>\r\n      <h1>Clinic session - Session Id : {doctorSessionId}</h1>\r\n      <h4>Patient number : {props.patient.currentAppointment.patient_number}</h4>\r\n      <h4>appointment id : {props.patient.currentAppointment._id}</h4>\r\n      <div>\r\n        {/* {UserVideo}\r\n        {PartnerVideo} */}\r\n    \r\n    <video muted ref={props.yourVid} autoPlay playsInline />\r\n      <video ref={props.otherVid} autoPlay playsInline />\r\n\r\n      </div>\r\n\r\n      <div>{incomingCall}</div>\r\n      <div>\r\n        <Button variant=\"danger\">Leave Session</Button>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  patient: state.patient,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(PatientClinic);\r\n","import React from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\nimport {serverUrl } from '../../../globals'\r\nimport {connect} from 'react-redux'\r\n\r\n\r\nfunction SessionResultRows(props) {\r\n    \r\n    const divStyle = {\r\n        \"display\": \"flex\",\r\n        \"flexDirection\" : \"row\",\r\n        \"justifyContent\" : \"space-around\"\r\n    }\r\n\r\n    const bookSession = (session) => {\r\n        fetch(`${serverUrl}/appointments/`, {\r\n            \"method\": 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            \"body\" : JSON.stringify({\r\n                \"sessionId\" : session._id,\r\n                \"patientId\" : props.patientId\r\n            })\r\n        })\r\n        .then(res => res.json())\r\n        .then( res=> {\r\n            if ( res.success === true && res.available === true ) {\r\n                alert(\"Session booked successfully\")\r\n            }\r\n            else if ( res.success === true && res.available === false ) {\r\n                alert(\"All appointments booked\")\r\n            }\r\n            else {\r\n                alert(\"Error, recheck your dashbooard and try again\")\r\n            }\r\n        }  ).catch( err => { alert(\"Error confirming session, recheck your dashboard and try again\"+ err) })\r\n\r\n    }\r\n\r\n    const mappedSessions = props.sessions.map( session => {\r\n        \r\n                        const date = new Date(session.date)\r\n\r\n                        const booked = (session.appointments >= session.patient_limit);\r\n\r\n                        return(\r\n                            <div style={divStyle} key={session.id}>\r\n                                <div>{date.getDate()}/{date.getMonth() +1}/{date.getFullYear()}</div>\r\n                                <div> \r\n                                    { date.getHours() >= 10? date.getHours() :  (\"0\" +date.getHours()) } \r\n                                    :  \r\n                                    { date.getMinutes() >= 10? date.getMinutes() :  (\"0\" +date.getMinutes()) } \r\n                                </div>\r\n\r\n                                <div>\r\n                                    { session.appointments } / { session.patient_limit } bookings\r\n                                </div>\r\n\r\n                                <Button onClick={ () => {bookSession(session)}} variant={ booked? \"danger\" : \"success\" }>{ booked? \"Session Full\" : \"Book Session\" }</Button>\r\n                            </div>\r\n                        )\r\n                    } )\r\n\r\n    return (\r\n        <div>\r\n            {\r\n               mappedSessions.map(session => {\r\n                  return session\r\n               })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    patientId : state.patient.patient_id\r\n})\r\n\r\nexport default connect (mapStateToProps, {}) ( SessionResultRows )","import React, {useState, useEffect} from 'react'\r\nimport { serverUrl } from '../../../globals'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Card from 'react-bootstrap/Card'\r\nimport PatientHeader from '../layouts/PatientHeader'\r\nimport SessionResultRows from '../layouts/SessionResultRows'\r\n\r\n\r\nexport default function PatientSearchDoctor(props) {\r\n\r\n    useEffect(() => {\r\n        searchDoctors()\r\n    }, [])\r\n\r\n    let [searchResults, setSearchResults] = useState(null)\r\n    let sr = [];\r\n    let doctorsFound = [];\r\n    const { doctorName, specialization } = props.location.state\r\n\r\n\r\n    const searchDoctors = () => {\r\n        fetch(`${serverUrl}/doctors/`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                doctorName: doctorName,\r\n                specialization: specialization\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                if (res.success === true) {\r\n                    doctorsFound = [...res.result]\r\n                    sr = setDoctorSearchResults();\r\n                    setSearchResults(sr)\r\n                } else {\r\n                    console.log('error occured')\r\n                }\r\n            })\r\n            .catch(err => { console.log(\"Error fetching doctors\" + err); })\r\n    }\r\n\r\n\r\n    const setDoctorSearchResults = () => {\r\n        return doctorsFound.map(doctorFound => {\r\n            return (\r\n                <Card key={ doctorFound._id}>\r\n                    <Card.Body>\r\n                      Dr. { doctorFound.name}\r\n                        |\r\n                        { doctorFound.specialization }\r\n                        | \r\n                        <hr></hr>\r\n                        <SessionResultRows sessions={doctorFound.doctorSessions} />\r\n                    </Card.Body>\r\n                </Card>\r\n            )\r\n        })  \r\n    }\r\n\r\n\r\n    return (\r\n        <Container>\r\n            <PatientHeader />\r\n            <h3> Searching for Dr. {doctorName} ({specialization}) </h3>\r\n            <div id=\"search-results-doctors\">\r\n                {  searchResults }\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport logo from '../../images/logo.PNG'\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport default function Landing() {\r\n    return (\r\n        <div>\r\n            <img src={logo} alt=\"PsyconnectME Logo\"/>\r\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n            <ul className=\"navbar-nav mr-auto\">\r\n                <li><Link to={'/patients'} className=\"nav-link\"> Patient Login</Link></li>\r\n                <li><Link to={'/doctor'} className=\"nav-link\">Doctor Login</Link></li>\r\n            </ul>\r\n            </nav>\r\n            <hr />\r\n        </div>\r\n    )\r\n}\r\n","import { createBrowserHistory, Location } from \"history\";\r\n\r\nconst history = createBrowserHistory();\r\n\r\nexport default history;","import React, {useState} from 'react'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Container from 'react-bootstrap/Container'\r\nimport { connect } from \"react-redux\";\r\nimport history from '../../history'\r\n\r\nimport { logPatientIn, unauthenticatePatient  } from '../../redux/actions/patientActions'\r\n\r\nfunction PatientLogin(props) {\r\n\r\n    let [email, setEmail] = useState(\"\");\r\n    let [password, setPassword ] = useState(\"\");\r\n\r\n    const loginuser = () => {\r\n\r\n\r\n        props.authenticatePatientLogin(email, password)\r\n        \r\n            \r\n    }\r\nif (props.patient.authenticated === true) {\r\n            history.push(\"/patients/\");\r\n            document.location.reload();\r\n        }\r\n    return (\r\n        <Container>\r\n            <Form>\r\n            <Form.Group controlId=\"formBasicEmail\" onChange={ e => { setEmail(e.target.value) } }>\r\n                <Form.Label>Email address</Form.Label>\r\n                <Form.Control type=\"email\" placeholder=\"Enter email\" />\r\n                <Form.Text className=\"text-muted\">\r\n                    \r\n                </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formBasicPassword\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control type=\"password\" placeholder=\"Password\" onChange={ e => { setPassword(e.target.value) } }/>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"formBasicCheckbox\">\r\n                <Form.Check type=\"checkbox\" label=\"Check me out\" />\r\n            </Form.Group>\r\n            <Button variant=\"primary\"onClick={loginuser} >\r\n                Submit\r\n            </Button  >\r\n            </Form>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    patient: state.patient\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    authenticatePatientLogin: logPatientIn,\r\n    unauthenticatePatientLogin: unauthenticatePatient,\r\n}\r\n\r\nexport default connect (mapStateToProps, mapDispatchToProps )(PatientLogin)","import React, {useState} from 'react'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Container from 'react-bootstrap/Container'\r\nimport { connect } from \"react-redux\";\r\nimport history from '../../history'\r\n\r\nimport { logDoctorIn  } from '../../redux/actions/doctorActions'\r\n\r\nfunction DoctorLogin(props) {\r\n\r\n    let [doctorId, setDoctorId] = useState(\"\");\r\n    let [password, setPassword ] = useState(\"\");\r\n\r\n    const loginuser = () => {\r\n        props.logDoctorIn(doctorId, password)\r\n    }\r\nif (props.doctor.authenticated === true) {\r\n            history.push(\"/doctor/\");\r\n            document.location.reload();\r\n        }\r\n    return (\r\n        <Container>\r\n            <Form>\r\n            <Form.Group controlId=\"formBasicEmail\" onChange={ e => { setDoctorId(e.target.value) } }>\r\n                <Form.Label>Doctor Psyconnect ID</Form.Label>\r\n                <Form.Control type=\"email\" placeholder=\"Enter email\" />\r\n                <Form.Text className=\"text-muted\">\r\n                    \r\n                </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formBasicPassword\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control type=\"password\" placeholder=\"Password\" onChange={ e => { setPassword(e.target.value) } }/>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"formBasicCheckbox\">\r\n                <Form.Check type=\"checkbox\" label=\"Check me out\" />\r\n            </Form.Group>\r\n            <Button variant=\"primary\"onClick={loginuser} >\r\n                Log In\r\n            </Button  >\r\n            </Form>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    doctor: state.doctor\r\n})\r\n\r\nexport default connect (mapStateToProps, {logDoctorIn} )(DoctorLogin)","import { SET_USER_DOCTOR } from '../actions/types'\r\n\r\nconst initialState = {\r\n    userType: 'guest'\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch(action.type) {\r\n\r\n        case SET_USER_DOCTOR : \r\n            return {\r\n                ...state,\r\n                userType : 'doctor'\r\n            }\r\n\r\n        default : \r\n            return state;\r\n    }\r\n}","import { FETCH_DOCTOR_APPOINTMENTS_TODAY } from '../actions/types'\r\n\r\nconst initialState = {\r\n    appointments : []\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch(action.type) {\r\n        \r\n        case FETCH_DOCTOR_APPOINTMENTS_TODAY : \r\n            return {\r\n                ...state,\r\n                items: action.payload\r\n            }\r\n\r\n        default : \r\n            return state;\r\n    }\r\n}","import { AUTHENTICATE_PATIENT, UNAUTHENTICATE_PATIENT, PUT_PATIENT_IN_SESSION, FETCH_PATIENT_APPOINTMENTS } from '../actions/types'\r\nimport { LOCATION_CHANGE } from 'react-router-redux'\r\n\r\nconst initialState = {\r\n    patient_id: null,\r\n    username : '',\r\n    // password: '',\r\n    authenticated : false,\r\n    inSession : false,\r\n    sessionId : null,\r\n    patientAppointments : null\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch(action.type) {\r\n\r\n        case LOCATION_CHANGE :\r\n            return {\r\n                ...state,\r\n                patient_id: action.payload.patientDetails._id,\r\n                username : action.payload.username,\r\n                // password : action.payload.password,\r\n                authenticated : action.payload.authenticated,\r\n                inSession : false\r\n            } ;\r\n            break;\r\n\r\n        case AUTHENTICATE_PATIENT : \r\n\r\n            return {\r\n                ...state,\r\n                patient_id: action.payload.patientDetails._id,\r\n                username : action.payload.username,\r\n                // password : action.payload.password,\r\n                authenticated : action.payload.authenticated,\r\n                inSession : false\r\n            } ;\r\n            break;\r\n\r\n        case UNAUTHENTICATE_PATIENT : \r\n            return {\r\n                ...state,\r\n                username : null,\r\n                patient_id: '',\r\n                // password : action.payload.password,\r\n                authenticated : false,\r\n                inSession : false\r\n            } ;\r\n            break;\r\n\r\n        case PUT_PATIENT_IN_SESSION:\r\n            return {\r\n                ...state,\r\n                username : action.payload.username,\r\n                // password : action.payload.password,\r\n                authenticated : action.payload.authenticated,\r\n                inSession : true,\r\n                currentAppointment: action.payload.currentAppointment,\r\n                sessionId : action.payload.currentAppointment.session_id,\r\n                // sessionId : action.payload.doctorId\r\n            }\r\n        break;\r\n\r\n        case FETCH_PATIENT_APPOINTMENTS:\r\n            return{\r\n                ...state,\r\n                patientAppointments: action.payload\r\n            }\r\n\r\n        default : \r\n            return state;\r\n    }\r\n}","import { AUTHENTICATE_DOCTOR, UNAUTHENTICATE_DOCTOR, START_DOCTOR_SESSION, END_DOCTOR_SESSION } from '../actions/types'\r\n\r\nconst initialState = {\r\n    username : '',\r\n    authenticated : false,\r\n    inSession : false,\r\n    sessionId : null,\r\n    doctorDetails : {}\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch(action.type) {\r\n\r\n        case AUTHENTICATE_DOCTOR : \r\n            return {\r\n                ...state,\r\n                username : action.payload.username,\r\n                // password : action.payload.password,\r\n                authenticated : action.payload.authenticated,\r\n                inSession : false,\r\n                doctorDetails : action.payload.doctorDetails\r\n            }\r\n\r\n        case UNAUTHENTICATE_DOCTOR : \r\n            return {\r\n                username : \"\",\r\n                authenticated : false,\r\n                inSession: false,\r\n                doctorDetails : {}\r\n            }\r\n\r\n\r\n        case START_DOCTOR_SESSION : \r\n            return {\r\n                ...state,\r\n                currentSessionDetails : action.payload\r\n            }\r\n        \r\n        case END_DOCTOR_SESSION : \r\n            return {\r\n                ...state,\r\n                username : action.payload.username,\r\n                // password : action.payload.password,\r\n                authenticated : action.payload.authenticated,\r\n                inSession : false,\r\n                doctorDetails : action.payload.doctorDetails\r\n            }\r\n\r\n        \r\n\r\n        default : \r\n            return state;\r\n    }\r\n}","import { CLINIC_NEXT_PATIENT } from '../actions/types'\r\n\r\nconst initialState = {\r\n    currentsessionId : null,\r\n    currentPatientId : null\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch(action.type) {\r\n        case CLINIC_NEXT_PATIENT : \r\n            return {\r\n                ...state,\r\n                items: action.payload\r\n            }\r\n\r\n        default : \r\n            return state;\r\n    }\r\n}","import { FETCH_DOCTOR_SESSIONS } from '../actions/types'\r\n\r\nconst initialState = {\r\n    sessions : []\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch(action.type) {\r\n\r\n        case FETCH_DOCTOR_SESSIONS : \r\n            return {\r\n                ...state,\r\n                sessions: action.payload\r\n            }\r\n\r\n        default : \r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport authReducer from './authReducer';\r\nimport appointmentsReducer from './appointmentsReducer';\r\nimport patientReducer from './patientReducer';\r\nimport doctorReducer from './doctorReducer';\r\nimport doctorClinicReducer from './doctorClinicReducer';\r\nimport sessionsReducer from './sessionsReducer';\r\n\r\nexport default combineReducers({\r\n    auth : authReducer,\r\n    appointments : appointmentsReducer,\r\n    session : sessionsReducer,\r\n    patient : patientReducer,\r\n    doctor : doctorReducer,\r\n    clinic : doctorClinicReducer\r\n})","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\n\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\n// const store = createStore(rootReducer,\r\n//      initialState,\r\n//      compose(\r\n//          applyMiddleware(...middleware),\r\n//          window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n//      )\r\n//      );\r\n\r\n \r\nconst persistConfig = { \r\n    key: 'root',\r\n    storage,\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\n \r\nexport default () => {\r\n  let store = createStore\r\n    (\r\n        persistedReducer,\r\n        initialState,\r\n        compose(\r\n            applyMiddleware(...middleware)\r\n            // ,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n        )\r\n    );\r\n  let persistor = persistStore(store)\r\n  return { store, persistor }\r\n}\r\n\r\n// export default store;","import * as React from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { logPatientIn } from '../../redux/actions/patientActions'\r\nimport history from '../../history'\r\n// import DoctorHeader from '../doctor/layouts/DoctorHeader';\r\n\r\nconst LoggedInPatientRoute = ({component: Component , ...otherProps}) => {\r\n\r\n  if (otherProps.patient.authenticated !== true) {\r\n    history.push(\"/patients/login\");\r\n    document.location.reload();\r\n  }\r\n  \r\n\r\n  const theComponent = () => {\r\n    if (otherProps.patient.authenticated === true) \r\n      return <Component {...otherProps} />\r\n  }\r\n\r\nreturn(\r\n\r\n  <>\r\n    <Route\r\n      render={otherProps => (\r\n        <>\r\n          { theComponent(otherProps)}\r\n        </>\r\n      )}\r\n    />\r\n  </>\r\n)\r\n\r\n      };\r\n\r\nconst mapStateToProps = (state) => ({\r\n  patient : state.patient\r\n})\r\n\r\nexport default connect (mapStateToProps, null)(LoggedInPatientRoute);\r\n\r\n","import * as React from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport history from '../../history'\r\n// import DoctorHeader from '../doctor/layouts/DoctorHeader';\r\n\r\nconst LoggedInDoctorRoute = ({component: Component , ...otherProps}) => {\r\n\r\n  if (otherProps.doctor.authenticated !== true || otherProps.auth.userType !== 'doctor') {\r\n    history.push(\"/doctor/login\");\r\n    document.location.reload();\r\n  }\r\n  \r\n  const theComponent = () => {\r\n    if (otherProps.doctor.authenticated === true) \r\n      return <Component {...otherProps} />\r\n  }\r\n\r\n  return(\r\n    <>\r\n      <Route\r\n        render={otherProps => (\r\n          <>\r\n            {theComponent()}\r\n          </>\r\n        )}\r\n      />\r\n    </>\r\n  )\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  auth : state.auth,\r\n  doctor : state.doctor\r\n})\r\n\r\nexport default connect (mapStateToProps, null)(LoggedInDoctorRoute);","import React, { useEffect, useRef, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport Peer from \"simple-peer\";\r\nimport Container from 'react-bootstrap/Container'\r\n\r\nimport { connect } from \"react-redux\";\r\n// import DoctorNotepad from \"../doctor/layouts/DoctorNotepad\";\r\nimport DoctorClinic from \"../doctor/pages/clinic/DoctorClinic\";\r\nimport PatientClinic from \"../patient/clinic/PatientClinic\";\r\n\r\n\r\n\r\nconst Video = (props) => {\r\n    const ref = useRef();\r\n\r\n    useEffect(() => {\r\n        props.peer.on(\"stream\", stream => {\r\n            ref.current.srcObject = stream;\r\n        })\r\n    }, []);\r\n\r\n    return (\r\n        <video playsInline autoPlay ref={ref} />\r\n    );\r\n}\r\n\r\n\r\nconst Room = (props) => {\r\n    const [peers, setPeers] = useState([]);\r\n    const socketRef = useRef();\r\n    const userVideo = useRef();\r\n    const peersRef = useRef([]);\r\n    const roomID = props.match.params.roomID;\r\n\r\n    const otherVideo = useRef()\r\n    const [patients, setPatients] = useState([])\r\n\r\n    useEffect(() => {\r\n        socketRef.current = io.connect(\"/\");\r\n\r\n        // get this user's webcam video stream\r\n        navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then(stream => {\r\n            userVideo.current.srcObject = stream;\r\n            socketRef.current.emit(\"join room\", roomID);\r\n            socketRef.current.on(\"all users\", users => {\r\n                // create an empty array to store the other peers\r\n                const peers = [];\r\n\r\n                // add each user to this empty array\r\n                users.forEach(userID => {\r\n                    const peer = createPeer(userID, socketRef.current.id, stream);\r\n                    peersRef.current.push({\r\n                        peerID: userID,\r\n                        peer,\r\n                    })\r\n                    peers.push(peer);\r\n                })\r\n\r\n                // set the peers array to the array sent\r\n                setPeers(peers);\r\n            })\r\n\r\n            socketRef.current.on(\"user joined\", payload => {\r\n                console.log('user joined')\r\n                const peer = addPeer(payload.signal, payload.callerID, stream);\r\n                peersRef.current.push({\r\n                    peerID: payload.callerID,\r\n                    peer,\r\n                })\r\n                // setPeers([peer])\r\n                setPeers(users => [...users, peer]);\r\n            });\r\n\r\n            socketRef.current.on(\"receiving returned signal\", payload => {\r\n                console.log(\"receiving returned signal\")\r\n                const item = peersRef.current.find(p => p.peerID === payload.id);\r\n                item.peer.signal(payload.signal);\r\n            });\r\n        })\r\n    }, []);\r\n\r\n    function createPeer(userToSignal, callerID, stream) {\r\n        console.log('creating peer')\r\n        const peer = new Peer({\r\n            initiator: true,\r\n            trickle: false,\r\n            config: { iceServers: [{ urls: 'stun:stun.l.google.com:19302' }, { urls: 'stun:global.stun.twilio.com:3478?transport=udp' }] },\r\n            stream,\r\n        });\r\n\r\n        peer.on(\"signal\", signal => {\r\n            console.log('sending signal')\r\n            socketRef.current.emit(\"sending signal\", { userToSignal, callerID, signal })\r\n        })\r\n\r\n        // added\r\n        peer.on('stream', stream => {\r\n            console.log('received stream')\r\n            otherVideo.current.srcObject = stream\r\n        })\r\n\r\n\r\n        return peer;\r\n    }\r\n\r\n    function addPeer(incomingSignal, callerID, stream) {\r\n        console.log('adding peer')\r\n        const peer = new Peer({\r\n            initiator: false,\r\n            trickle: false,\r\n            config: { iceServers: [{ urls: 'stun:stun.l.google.com:19302' }, { urls: 'stun:global.stun.twilio.com:3478?transport=udp' }] },\r\n            stream,\r\n        })\r\n\r\n        peer.on(\"signal\", signal => {\r\n            socketRef.current.emit(\"returning signal\", { signal, callerID })\r\n        })\r\n\r\n        // added\r\n        peer.on('stream', stream => {\r\n            otherVideo.current.srcObject = stream\r\n        })\r\n\r\n        peer.signal(incomingSignal);\r\n\r\n        return peer;\r\n    }\r\n\r\n\r\n\r\n    if (props.auth.userType === 'doctor') {\r\n        return ( <DoctorClinic yourVid={ userVideo } otherVid={otherVideo} /> )\r\n    }\r\n    else {\r\n        return ( <PatientClinic  yourVid={ userVideo } otherVid={otherVideo} />)\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <video muted ref={userVideo} autoPlay playsInline />\r\n            {/* {peers.map((peer, index) => {\r\n                console.log(typeof(peers))\r\n                // console.log(index)\r\n                // return (\r\n                //     <Video key={index} peer={peer} />\r\n                // );\r\n                otherVideo.current.srcObject = peer.stream\r\n            })} */}\r\n\r\n            <video ref={otherVideo} autoPlay playsInline />\r\n\r\n\r\n            \r\n        </Container>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    auth : state.auth\r\n})\r\n\r\nexport default connect (mapStateToProps, {})(Room);","import React from 'react'\r\nimport Peer from 'peerjs'\r\nimport DoctorClinic from '../doctor/pages/clinic/DoctorClinic'\r\nimport PatientClinic from '../patient/clinic/PatientClinic'\r\nimport { connect } from 'react-redux'\r\n\r\n\r\nfunction Clinic(props) {\r\n\r\n    let comp\r\n\r\n    if (props.auth.userType == 'doctor') {\r\n        comp = <DoctorClinic></DoctorClinic>\r\n    }\r\n    else {\r\n        // patient\r\n        comp = <PatientClinic/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {alert('test')}\r\n            {comp}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth\r\n})\r\n\r\nexport default connect ( mapStateToProps, {} )(Clinic)","import React from 'react';\nimport './App.css';\nimport PatientDashboard from './components/patient/pages/PatientDashboard';\nimport DoctorDashboard from './components/doctor/pages/DoctorDashboard';\nimport DoctorClinic from './components/doctor/pages/clinic/DoctorClinic';\nimport PatientClinic from './components/patient/clinic/PatientClinic';\nimport PatientSearchDoctor from './components/patient/pages/PatientSearchDoctor'\n\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Landing from './components/general/Landing';\nimport PatientLogin from './components/login/PatientLogin';\nimport DoctorLogin from './components/login/DoctorLogin'\nimport { Provider } from 'react-redux'\nimport configureStore from './redux/store';\nimport LoggedInPatientRoute from './components/routeExtensions/LoggedInPatientRoute';\nimport LoggedInDoctorRoute from './components/routeExtensions/LoggedInDoctorRoute';\nimport { PersistGate } from 'redux-persist/integration/react'\nimport Room from './components/clinic/Room';\nimport Clinic from './components/clinic/Clinic';\n\n\nfunction App() {\n\n  const { store, persistor }  = configureStore();\n\n  return (\n    <Provider store={store}>\n      <Router>\n      <PersistGate loading={null} persistor={persistor}>\n      <div>\n        <Switch>\n            <Route exact path='/' component={Landing}/>\n            <Route exact path='/patients/login' component={PatientLogin} />\n            <LoggedInPatientRoute exact path='/patients' component={PatientDashboard} />\n            <LoggedInPatientRoute exact path='/patients/searchDoctor' component={PatientSearchDoctor} />\n            <LoggedInPatientRoute exact path='/patients/clinic/:docId' component={PatientClinic} />\n            <Route exact path='/doctor/login' component={DoctorLogin} />\n            <LoggedInDoctorRoute exact path='/doctor' component={DoctorDashboard} />\n            <LoggedInDoctorRoute exact path='/doctor/clinic' component={DoctorClinic} />\n            <Route path='/room/:appointmentId' component={Room}></Route>\n            <Route exact path='/clinic/:appointmentId' component={Clinic}></Route>\n        </Switch>\n      </div>\n    </PersistGate>\n    </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}