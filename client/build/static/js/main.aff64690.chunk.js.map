{"version":3,"sources":["images/logo_white.png","../node_modules/peerjs/dist sync","globals.js","components/patient/layouts/PatientDoctorSearch.js","components/patient/layouts/AppointmentRow.js","redux/actions/patientActions.js","redux/actions/types.js","components/patient/layouts/PatientCurrentAppointments.js","components/patient/layouts/PatientHeader.js","components/patient/pages/PatientDashboard.js","components/doctor/layouts/DoctorHeader.js","redux/actions/doctorActions.js","components/doctor/layouts/SessionRow.js","components/doctor/layouts/DoctorUpcomingSessions.js","redux/actions/sessionActions.js","redux/actions/doctorClinicActions.js","components/doctor/layouts/DoctorSessionBuilder.js","components/doctor/pages/DoctorDashboard.js","redux/actions/authActions.js","components/doctor/pages/clinic/Video.js","components/doctor/layouts/DoctorNotepad.js","components/doctor/pages/clinic/DoctorClinic.js","components/patient/clinic/PatientClinic.js","components/patient/layouts/SessionResultRows.js","components/patient/pages/PatientSearchDoctor.js","components/general/Landing.js","history.js","components/login/PatientLogin.js","components/login/DoctorLogin.js","redux/reducers/authReducer.js","redux/reducers/appointmentsReducer.js","redux/reducers/patientReducer.js","redux/reducers/doctorReducer.js","redux/reducers/doctorClinicReducer.js","redux/reducers/sessionsReducer.js","redux/reducers/index.js","redux/store.js","components/routeExtensions/LoggedInPatientRoute.js","components/routeExtensions/LoggedInDoctorRoute.js","components/clinic/Room.js","components/clinic/Clinic.js","components/researcher/pages/ResearcherDashboard.js","components/signup/PatientSignup.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","serverUrl","socketUrl","PatientDoctorSearch","useState","specialization","setSpecialization","doctorName","setDoctorName","className","Form","Group","controlId","Label","Control","type","placeholder","onChange","target","value","as","Button","params","doctor","to","pathname","state","AppointmentRow","props","date","Date","appointment","sessionDetails","doctorDetails","name","getDate","getMonth","getFullYear","getHours","getMinutes","completed","variant","getPatientAppointments","patientId","dispatch","a","fetch","then","res","json","appointments","payload","catch","err","alert","logPatientOut","connect","patient","patientAppointments","appointmentsRows","console","log","forEach","push","key","_id","Table","striped","bordered","hover","map","appointmentRow","Navbar","bg","Brand","href","Nav","onClick","patientAge","age","setCurrentSessionActive","username","activeSession","authenticated","currentAppointment","inSession","nextAppointment","patientCurrentAppointments","setPatientCurrentAppointments","nextAppointmentDateTime","setNextAppointmentDateTime","activeSessionAvailable","appointmentLink","setAppointmentLink","useEffect","patient_id","temp_nadt","getNextAppointmentDateTime","getAppointmentLink","putInSession","sortedByDate","slice","sort","b","filter","data","thisDate","length","today","thisMonth","thisYear","timeRemaining","daysRemaining","Math","floor","parse","Container","logDoctorOut","SessionRow","session","patientsCount","doctorId","items","sessions","fetchDoctorSessions","result","sessionData","sessionsRows","appointmentCount","sessionRow","clinicNextPatient","sessionId","setDate","time","setTime","number","setNumber","val","multiple","undefined","sessiondate","dateString","givenDate","timeParts","match","isoDate","toISOString","method","headers","body","JSON","stringify","dateTime","max_patients","success","clinic","setDoctorInSession","setUserDoctor","sessionToday","sessionTodayVals","currentlyActiveSession","hoursToNext","setHoursToNext","enterSessionButton","setEnterSessionButton","currentAppointmentLink","setCurrentAppointmentLink","setCurrentlyActiveSession","calcHoursToNextSession","setupAppointments","sessionDate","month","sessionMonth","getTime","sessionTime","filterAndSortAppointments","role","appointmentList","list","patient_number","Video","playsInline","muted","ref","stream","autoPlay","style","border","width","height","DoctorNotepad","dropDown","useRef","input","inputMedIndex","conditionInput","inputCondCode","addButton","searchMedicineValue","setSearchMedicineValue","searchConditionValue","setSearchConditionValue","dropDownConditions","addConditionButton","medication","conditionRef","medicationRows","setMedicationRows","medicines","setMedicines","medicineList","setMedicineList","conditionRows","setConditionRows","conditions","setConditions","conditionList","setConditionList","confirmButton","handleConfirm","bottomButton","setBottomButton","fetchMedicineList","fetchConditionsList","getMedsList","getCondtionsList","checkValidCondition","con","ans","m","checkValidMeds","med","changeValue","index","current","handleRemove","getRows","handleRemoveCondition","cond","getConditionRows","setSearchValue","setConditionSearchValue","Object","k","v","h","prescription","appointment_id","appointmentId","diagnosis","patient_age","toggleButtonType","innerText","backgroundColor","filterFunction","i","toUpperCase","getElementsByTagName","textContent","indexOf","display","medIndex","condCode","preventDefault","classList","toggle","toggleFunction","onKeyUp","dosage","times","beforeMeal","medication_index","size","condition_code","patientVideo","history","useHistory","setStream","receivingCall","callAccepted","userVideo","socket","currentSessionId","session_id","currentPatientNumber","setNextAppointment","connectToNextPatient","io","navigator","mediaDevices","getUserMedia","video","audio","srcObject","emit","on","appointmentDetails","next_appointment","peer","yourVid","otherVid","incomingCall","caller","doctorSessionId","patientPeer","Peer","host","port","call","answer","divStyle","mappedSessions","booked","patient_limit","available","bookSession","searchDoctors","searchResults","setSearchResults","sr","doctorsFound","location","setDoctorSearchResults","doctorFound","Card","Body","doctorSessions","Landing","inline","createBrowserHistory","mapDispatchToProps","authenticatePatientLogin","email","password","userIsValid","patientDetails","unauthenticatePatientLogin","setEmail","setPassword","document","reload","Text","Check","label","logDoctorIn","setDoctorId","initialState","userType","currentsessionId","currentPatientId","combineReducers","auth","action","LOCATION_CHANGE","currentSessionDetails","middleware","thunk","persistConfig","storage","persistedReducer","persistReducer","rootReducer","Component","component","otherProps","theComponent","render","setPeers","socketRef","peersRef","roomID","otherVideo","users","peers","userID","userToSignal","callerID","initiator","trickle","config","iceServers","urls","signal","createPeer","peerID","find","p","incomingSignal","addPeer","comp","ResearcherDashboard","Row","Col","xs","src","whiteLogo","PatientSignup","show","setShow","handleClose","dob","conf_password","verifyPassword","required","isodob","Modal","onHide","Header","closeButton","Title","Footer","App","store","createStore","compose","applyMiddleware","persistor","persistStore","configureStore","loading","exact","path","PatientLogin","PatientDashboard","PatientSearchDoctor","PatientClinic","DoctorLogin","DoctorDashboard","DoctorClinic","Room","Clinic","Boolean","window","hostname","ReactDOM","StrictMode","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.aff64690.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo_white.d48bf04d.png\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 167;","const serverUrl = \"\"\r\n\r\nconst socketUrl = \"\"\r\n\r\nexports.serverUrl = serverUrl\r\nexports.socketUrl = socketUrl","import React, {useState} from 'react'\r\nimport  Button from 'react-bootstrap/Button'\r\nimport  Form from 'react-bootstrap/Form'\r\nimport {Link } from 'react-router-dom'\r\n\r\nexport default function PatientDoctorSearch() {\r\n\r\n    let [specialization, setSpecialization] = useState(\"Psychiatrist\")\r\n    let [doctorName, setDoctorName] = useState(\"\")\r\n\r\n    return (\r\n        <div className=\"patient-search-doctor\">\r\n\r\n            <h2>Make an appointment</h2>\r\n            <br></br>\r\n            <hr></hr>\r\n            <br></br>\r\n            <Form>\r\n            <Form.Group controlId=\"doctorSearchForm.doctorName\">\r\n                <Form.Label>Doctor Name:</Form.Label>\r\n                <Form.Control type=\"text\" placeholder=\"E.g. Jane Doe\" onChange={e => { setDoctorName(e.target.value) }}></Form.Control>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"doctorSearchForm.selectSpecialization\">\r\n                <Form.Label>Doctor's Specialization</Form.Label>\r\n                <Form.Control as=\"select\" onChange={e => { setSpecialization(e.target.value) }}>\r\n                    <option>Psychiatrist</option>\r\n                    <option>Child Psychiatrist</option>\r\n                    <option>Psychologist</option>\r\n                    <option>Child Psychologist</option>\r\n                    <option>Therapist</option>\r\n                </Form.Control>\r\n            </Form.Group>\r\n            \r\n            <Button>\r\n                 <Link params={{ doctor:doctorName, specialization: specialization}}\r\n                   to={{\r\n                       pathname: \"/patients/searchDoctor\",\r\n                       state: {\r\n                           doctorName: doctorName,\r\n                           specialization: specialization\r\n                           }\r\n                        }\r\n                    }\r\n                           >\r\n                    Search\r\n                 </Link> \r\n            </Button>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Button } from 'react-bootstrap'\r\n\r\nexport default function AppointmentRow(props) {\r\n\r\n    var date = new Date(props.appointment.sessionDetails.date);\r\n    \r\n\r\n    return (\r\n        <tr>\r\n            {/* <td> {props.appointment._id} </td> */}\r\n            <td> Dr. { props.appointment.doctorDetails.name } </td>\r\n            <td>  { props.appointment.doctorDetails.specialization } </td>\r\n            <td> {date.getDate()}/{date.getMonth()}/{date.getFullYear()} </td>\r\n            <td> {date.getHours()}:{date.getMinutes()}  </td>\r\n            <td className=\"cancel-appointment-td\" > { props.appointment.completed ? \"\" :  <Button variant=\"danger\">Cancel Appointment</Button>} </td>\r\n        </tr>\r\n    )\r\n}\r\n","import { AUTHENTICATE_PATIENT, UNAUTHENTICATE_PATIENT, PUT_PATIENT_IN_SESSION, FETCH_PATIENT_APPOINTMENTS } from '../actions/types';\r\nimport { serverUrl } from '../../globals'\r\n\r\n\r\nexport function authenticatePatient() {\r\n  return {\r\n    type: AUTHENTICATE_PATIENT,\r\n  };\r\n}\r\n\r\n\r\nexport function unauthenticatePatient() {\r\n  return {\r\n    type: UNAUTHENTICATE_PATIENT,\r\n  };\r\n}\r\n\r\n\r\nexport function patientAge( age ) {\r\n  return async function (dispatch) {\r\n    dispatch({\r\n      type : 'SET_AGE',\r\n      payload: age\r\n    })\r\n  }\r\n}\r\n\r\n\r\nexport function getPatientAppointments (patientId) {\r\n  return async function (dispatch) {\r\n    fetch(`/patient/appointments/${patientId}`)\r\n      .then(res => res.json())\r\n      .then( appointments => {\r\n\r\n        dispatch({\r\n            type : FETCH_PATIENT_APPOINTMENTS,\r\n            payload : appointments\r\n        }) \r\n      } )\r\n      .catch( err => { alert(\"patient appointment error\" + err) } )\r\n  }\r\n}\r\n\r\n\r\n  export function logPatientOut () {\r\n    return async function (dispatch) {\r\n      dispatch(\r\n        {\r\n          type : UNAUTHENTICATE_PATIENT\r\n        }\r\n      )\r\n    }\r\n  }\r\n\r\n  export function logPatientIn (email, password) {\r\n    return async function (dispatch) {\r\n        fetch(`${serverUrl}/patient/auth`,\r\n         {\r\n           method: 'POST',\r\n           headers: {\r\n            'Content-Type': 'application/json'\r\n            // 'Content-Type': 'application/x-www-form-urlencoded',\r\n          },\r\n          body : JSON.stringify({\r\n            patientId : email,\r\n            password: password\r\n          })\r\n         }) \r\n            .then(res => res.json())\r\n            .then( result => {\r\n              \r\n              if (result.userIsValid === true) {\r\n                dispatch(\r\n                  {\r\n                      type: AUTHENTICATE_PATIENT,\r\n                      payload : {\r\n                        username : email,\r\n                        password : password,\r\n                        authenticated: true,\r\n                        patientDetails : result.patientDetails\r\n                      }\r\n                  }\r\n                  )\r\n              }\r\n\r\n        } ).catch(err => { console.log(\"Error in Patient Actions\" + err) })      \r\n    }\r\n}\r\n\r\n\r\nexport function setCurrentSessionActive (username, activeSession) {\r\n  return async function (dispatch) {\r\n    dispatch(\r\n      {\r\n        type : PUT_PATIENT_IN_SESSION,\r\n        payload : {\r\n          username: username,\r\n          authenticated: true,\r\n          currentAppointment: activeSession,\r\n          inSession : true\r\n        }\r\n      }\r\n    )\r\n}\r\n}","export const AUTHENTICATE_PATIENT = 'AUTHENTICATE_PATIENT'\r\nexport const AUTHENTICATE_DOCTOR = 'AUTHENTICATE_DOCTOR'\r\nexport const UNAUTHENTICATE_PATIENT = 'UNAUTHENTICATE_PATIENT'\r\nexport const UNAUTHENTICATE_DOCTOR = 'UNAUTHENTICATE_DOCTOR'\r\n\r\nexport const PUT_PATIENT_IN_SESSION = 'PUT_PATIENT_IN_SESSION'\r\nexport const FETCH_PATIENT_APPOINTMENTS = 'FETCH_PATIENT_APPOINTMENTS' \r\n\r\nexport const START_DOCTOR_SESSION = 'START_DOCTOR_SESSION'\r\nexport const END_DOCTOR_SESSION = 'END_DOCTOR_SESSION'\r\n\r\nexport const SET_USER_DOCTOR = 'SET_USER_DOCTOR'\r\n\r\nexport const FETCH_DOCTOR_APPOINTMENTS_TODAY = 'FETCH_DOCTOR_APPOINTMENTS_TODAY'\r\nexport const FETCH_DOCTOR_SESSIONS = 'FETCH_DOCTOR_SESSIONS'\r\n\r\nexport const CLINIC_NEXT_PATIENT = 'CLINIC_NEXT_PATIENT'","import React, {useEffect} from 'react'\r\nimport Table from 'react-bootstrap/Table';\r\nimport AppointmentRow from './AppointmentRow';\r\nimport {getPatientAppointments} from '../../../redux/actions/patientActions'\r\nimport {connect} from 'react-redux'\r\n\r\nfunction PatientCurrentAppointments(props) {\r\n    \r\n    // useEffect(() => {\r\n    //     // props.getPatientAppointments(props.patient.patient_id);\r\n    // }, [])\r\n\r\n\r\n    var appointments = props.patient.patientAppointments;\r\n    let appointmentsRows = []\r\n\r\n    console.log(props)\r\n\r\n    const setAppointmentRows = () => {\r\n        appointments.forEach(\r\n            appointment => {\r\n                appointmentsRows.push(<AppointmentRow key={appointment._id} appointment={appointment} />)\r\n            }\r\n        )\r\n    }\r\n\r\n    setAppointmentRows()\r\n    \r\n\r\n    return (\r\n        <div>\r\n            <h4>\r\n\r\n            Your Current Appointments\r\n            </h4>\r\n\r\n            <Table striped bordered hover>\r\n                <thead>\r\n                    <tr>\r\n                    {/* <th>id</th> */}\r\n                    <th>Doctor</th>\r\n                    <th>Specialization</th>\r\n                    <th>Date</th>\r\n                    <th>Time</th>\r\n                    <th></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {appointmentsRows.map( appointmentRow => {\r\n                       return appointmentRow\r\n                    } )}\r\n                </tbody>\r\n            </Table>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    patient : state.patient\r\n})\r\n\r\nexport default connect (mapStateToProps, { getPatientAppointments }) (PatientCurrentAppointments);\r\n","import React from 'react'\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Nav from 'react-bootstrap/Nav'\r\n\r\nimport { connect } from 'react-redux'\r\nimport { logPatientOut } from '../../../redux/actions/patientActions'\r\n\r\nfunction PatientHeader(props) {\r\n\r\n    const logOut = () => {\r\n        props.logPatientOut();\r\n    }\r\n\r\n    return (\r\n        <Navbar bg=\"light\" variant=\"light\">\r\n        <Navbar.Brand href=\"#home\" className=\"navbar-logo-psyconnect\"> PsyconnectME - Patient </Navbar.Brand>\r\n        <Nav className=\"mr-auto\">\r\n          \r\n        </Nav>\r\n        <Button variant=\"dark\" onClick={logOut}>\r\n            Sign Out    \r\n        </Button>\r\n      </Navbar>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    patient : state.patient\r\n})\r\n\r\nexport default connect (mapStateToProps, { logPatientOut })(PatientHeader);\r\n","import React, { useState } from \"react\";\r\nimport PatientDoctorSearch from \"../layouts/PatientDoctorSearch\";\r\nimport PatientCurrentAppointments from \"../layouts/PatientCurrentAppointments\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport PatientHeader from \"../layouts/PatientHeader\";\r\nimport {\r\n  setCurrentSessionActive,\r\n  logPatientOut,\r\n  getPatientAppointments,\r\n  patientAge\r\n} from \"../../../redux/actions/patientActions\";\r\nimport { useEffect } from \"react\";\r\n\r\nfunction PatientDashBoard(props) {\r\n\r\n\r\n  let [patientCurrentAppointments, setPatientCurrentAppointments] = useState(\r\n    null\r\n  );\r\n  let [nextAppointmentDateTime, setNextAppointmentDateTime] = useState();\r\n\r\n  const defaultHourLimit = 24;\r\n  let activeSessionAvailable = false;\r\n  let activeSession = null;\r\n  let nextAppointment;\r\n  const [appointmentLink, setAppointmentLink] = useState(null);\r\n\r\n  useEffect(() => {\r\n    props.getPatientAppointments(props.patient.patient_id);\r\n    setPatientCurrentAppointments(<PatientCurrentAppointments />);\r\n\r\n    const temp_nadt = getNextAppointmentDateTime();\r\n    setNextAppointmentDateTime(temp_nadt);\r\n\r\n    getAppointmentLink();\r\n\r\n    getPatientAge()\r\n\r\n    // activeSessionAvailable = false;\r\n  }, []);\r\n\r\n  function getPatientAge() {\r\n    fetch(`/patient/age/${props.patient.patient_id}`)\r\n      .then(res => res.json())\r\n      .then(res => { props.patientAge(res.age);})\r\n  }\r\n\r\n  // put the patient in a session with the doctor using the session id\r\n  const putInSession = () => {\r\n    props.setCurrentSessionActive(props.patient.username, activeSession);\r\n  };\r\n\r\n  const getNextAppointmentDateTime = () => {\r\n    let appointments = props.patient.patientAppointments;\r\n    //sort the appointments array by date\r\n    let sortedByDate = appointments\r\n      .slice()\r\n      .sort(\r\n        (a, b) =>\r\n          new Date(a.sessionDetails.date) - new Date(b.sessionDetails.date)\r\n      );\r\n\r\n    // filter out past appointments\r\n    sortedByDate = sortedByDate.filter((data) => {\r\n      let thisDate = new Date();\r\n      let date = new Date(data.sessionDetails.date);\r\n      return (\r\n        date >= thisDate ||\r\n        (date.getFullYear() == thisDate.getFullYear() &&\r\n          date.getMonth() == thisDate.getMonth() &&\r\n          date.getDate() == thisDate.getDate() &&\r\n          thisDate.getHours() - date.getHours() <= defaultHourLimit)\r\n      );\r\n    });\r\n\r\n    if (sortedByDate.length > 0)\r\n      nextAppointment = new Date(sortedByDate[0].sessionDetails.date);\r\n    else return `No upcoming appointments`;\r\n\r\n    let date = new Date();\r\n    let today = date.getDate();\r\n    let thisMonth = date.getMonth();\r\n    let thisYear = date.getFullYear();\r\n\r\n    // check if the appointment is today\r\n    if (\r\n      nextAppointment.getFullYear() == thisYear &&\r\n      nextAppointment.getMonth() == thisMonth &&\r\n      nextAppointment.getDate() == today\r\n    ) {\r\n      // get the number of hours until the appointment\r\n      let timeRemaining = nextAppointment.getHours() - date.getHours();\r\n      activeSessionAvailable = timeRemaining < 1;\r\n      activeSession = timeRemaining >= 1 ? null : sortedByDate[0];\r\n      return ` Youra next appointment is in less than ${\r\n        timeRemaining > 1 ? timeRemaining : 1\r\n      } hour(s) `;\r\n    } else {\r\n      // calculate days\r\n      let daysRemaining = Math.floor(\r\n        (Date.parse(nextAppointment) - Date.parse(new Date())) / 86400000\r\n      );\r\n      return `Your next appointment is in ${daysRemaining} day(s) `;\r\n    }\r\n  };\r\n\r\n  const getAppointmentLink = () => {\r\n    if (activeSessionAvailable){\r\n        setAppointmentLink(\r\n          <Link\r\n            to={\"/room/\" + activeSession._id}\r\n            className=\"nav-link\"\r\n          >\r\n            <Button variant=\"success\" onClick={putInSession}>\r\n              Call Doctor\r\n            </Button>\r\n          </Link>\r\n        );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <PatientHeader />\r\n      <br />\r\n      {patientCurrentAppointments\r\n        ? patientCurrentAppointments\r\n        : \"No Appointments\"}\r\n      <br />\r\n      <hr />\r\n      <br></br>\r\n\r\n      <hr />\r\n      <h3> {nextAppointmentDateTime} </h3>\r\n\r\n      {appointmentLink}\r\n\r\n      <br></br>\r\n      <hr />\r\n\r\n      <PatientDoctorSearch />\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  patient: state.patient,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  patientAge,\r\n  setCurrentSessionActive,\r\n  logPatientOut,\r\n  getPatientAppointments,\r\n})(PatientDashBoard);\r\n","import React from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport Navbar from 'react-bootstrap/Navbar'\r\n\r\nimport { logDoctorOut } from '../../../redux/actions/doctorActions'\r\nimport { connect } from 'react-redux'\r\n\r\nfunction DoctorHeader(props) {\r\n\r\n    return (\r\n        <div>\r\n        <Navbar bg=\"light\" variant=\"light\">\r\n    <Navbar.Brand href=\"#home\" className=\"navbar-logo-psyconnect\"> PsyconnectME - Dr. { props.doctorDetails.name }  </Navbar.Brand>\r\n        <Nav className=\"mr-auto\">\r\n          \r\n        </Nav>\r\n        <Button variant=\"dark\" onClick={ props.logDoctorOut }>\r\n            Sign Out    \r\n        </Button>\r\n      </Navbar>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps =  state  => ({\r\n    doctorDetails : state.doctor.doctorDetails\r\n}) \r\n\r\nexport default connect (mapStateToProps, {logDoctorOut}) (DoctorHeader)","import { AUTHENTICATE_DOCTOR, UNAUTHENTICATE_DOCTOR, START_DOCTOR_SESSION, END_DOCTOR_SESSION, SET_USER_DOCTOR } from '../actions/types'\r\nimport { serverUrl } from '../../globals'\r\n\r\nexport function logDoctorIn(doctorId, password) {\r\n    return async function (dispatch) {\r\n        fetch(`${serverUrl}/doctors/auth`,\r\n         {\r\n           method: 'POST',\r\n           headers: {\r\n            'Content-Type': 'application/json'\r\n            // 'Content-Type': 'application/x-www-form-urlencoded',\r\n          },\r\n          body : JSON.stringify({\r\n            doctorId : doctorId,\r\n            password: password\r\n          })\r\n         }) \r\n            .then(res => res.json())\r\n            .then( result => {\r\n\r\n              \r\n              if (result.userIsValid === true) {\r\n                dispatch(\r\n                  {\r\n                      type: AUTHENTICATE_DOCTOR,\r\n                      payload : {\r\n                        username : doctorId,\r\n                        authenticated: true,\r\n                        doctorDetails : result.doctorDetails\r\n                      }\r\n                  }\r\n                  )\r\n                dispatch (\r\n                  {\r\n                    type : SET_USER_DOCTOR\r\n                  }\r\n                )\r\n              }\r\n\r\n        } ).catch(err => { console.log(err) })      \r\n    }\r\n}\r\n\r\nexport function logDoctorOut () {\r\n  return async function (dispatch) {\r\n    dispatch (\r\n      {\r\n        type: UNAUTHENTICATE_DOCTOR,\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n// DOCTOR SESSIONS\r\n\r\nexport function setDoctorInSession (session) {\r\n  return async function (dispatch) {\r\n    dispatch (\r\n      {\r\n        type : START_DOCTOR_SESSION,\r\n        payload : session\r\n      }\r\n    ) \r\n  }\r\n}\r\n\r\n\r\n\r\nexport function setDoctorOutSession () {\r\n  return async function (dispatch) {\r\n    dispatch (\r\n      {\r\n        type : END_DOCTOR_SESSION\r\n      }\r\n    ) \r\n  }\r\n}","import React from 'react'\r\n\r\nexport default function SessionRow(props) {\r\n\r\n    const date = new Date(props.session.date)\r\n\r\n\r\n    return (\r\n        <tr>\r\n            <td>\r\n                {props.session._id}\r\n            </td>\r\n            <td>\r\n                {props.session.date}\r\n            </td>\r\n            <td>\r\n                {date.getHours()}:{date.getMinutes()}\r\n            </td>\r\n            <td>\r\n                {props.patientsCount}\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport Table from 'react-bootstrap/Table'\r\nimport SessionRow from './SessionRow';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { fetchDoctorSessions } from '../../../redux/actions/sessionActions';\r\n\r\nfunction DoctorUpcomingSessions(props) {\r\n\r\n    useEffect(() => {\r\n         props.fetchDoctorSessions(props.doctorId)\r\n        }, [])\r\n        \r\n    var sessionsRows = [];\r\n    \r\n\r\n    const setSessionsRows = () => {\r\n        sessionsRows = props.sessions.map( (session) => {\r\n            if (new Date(session.session.date) >= new Date()) \r\n                return <SessionRow patientsCount={ session.appointmentCount } session={session.session} />\r\n        } );\r\n    }\r\n    \r\n    if (props.sessions) {\r\n        setSessionsRows();\r\n    }\r\n\r\n    return (\r\n        <Table>\r\n            <thead>\r\n                <th>\r\n                    Session Id\r\n                </th>\r\n                <th>\r\n                    Date\r\n                </th>\r\n                <th>\r\n                    Starting Time\r\n                </th>\r\n                <th>\r\n                    No. of Patients\r\n                </th>\r\n            </thead>\r\n            <tbody>\r\n                {\r\n                    sessionsRows.map( sessionRow => {\r\n                        return sessionRow\r\n                    } )\r\n                }\r\n            </tbody>\r\n        </Table>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    doctorId : state.doctor.doctorDetails._id,\r\n    appointments : state.appointments.items,\r\n    sessions : state.session.sessions\r\n})\r\n\r\nexport default connect (mapStateToProps, { fetchDoctorSessions } )(DoctorUpcomingSessions);\r\n","import { FETCH_DOCTOR_SESSIONS } from '../actions/types'\r\nimport {serverUrl} from '../../globals'\r\n\r\n\r\nexport function fetchDoctorSessions (doctorId) {\r\n    return async function (dispatch) {\r\n        fetch(`${serverUrl}/doctors/sessions/${doctorId}`) \r\n            .then(res => res.json())\r\n            .then( result => {\r\n                dispatch(\r\n                {\r\n                    type: FETCH_DOCTOR_SESSIONS,\r\n                    payload : result.sessionData\r\n                }\r\n            )\r\n        } ).catch(err => { console.log(err) })      \r\n    }\r\n}","import { CLINIC_NEXT_PATIENT } from \"./types\"\r\nimport { serverUrl } from '../../globals'\r\n\r\n\r\n\r\nexport function clinicNextPatient (sessionId) {\r\n    return async function (dispatch) {\r\n        // get the doctor's list of appointments\r\n        fetch(`${serverUrl}/doctors/appointments/next/${sessionId}`)\r\n        .then( res => res.json() )\r\n        .then( result => {\r\n            \r\n            // filter out completed appointments\r\n            result.appointment = result.appointment.filter(a => {\r\n                return !a.completed\r\n            })\r\n\r\n            dispatch({\r\n                type : CLINIC_NEXT_PATIENT,\r\n                payload : result\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\n","import React, { useState } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { connect } from \"react-redux\";\r\nimport { serverUrl } from \"../../../globals\";\r\nfunction DoctorSessionBuilder(props) {\r\n  const [date, setDate] = useState();\r\n  const [time, setTime] = useState();\r\n  const [number, setNumber] = useState(25);\r\n\r\n  // NOTE -- Doing validation on the frontend needs to be changed when I have time\r\n\r\n  const createSession = () => {\r\n    // check for undefined date or time\r\n    if (date === undefined || time === undefined) {\r\n      alert(\"Invalid Date or Time\");\r\n      return;\r\n    }\r\n\r\n    // check current sessions if there is already a session on that day\r\n    const currentSessions = props.sessions.sessions;\r\n    currentSessions.forEach((session) => {\r\n      let sessiondate = new Date(session.session.date);\r\n      let dateString = `${sessiondate.getFullYear()}-${sessiondate.getMonth()}-${sessiondate.getDate()}`;\r\n\r\n      if (date == dateString) {\r\n        alert(\"There is already a session on that day\");\r\n        return;\r\n      }\r\n    });\r\n\r\n    // check date to ensure the date has not passed already\r\n    const today = new Date();\r\n    const givenDate = new Date(date);\r\n\r\n    if (\r\n      today > givenDate &&\r\n      today.getDate() != givenDate.getDate() &&\r\n      today.getMonth() != givenDate.getMonth() &&\r\n      today.getFullYear() != givenDate.getFullYear()\r\n    ) {\r\n      alert(\"The date has already passed\");\r\n      return;\r\n    }\r\n\r\n    const timeParts = [...time.match(/(\\d{2}):(\\d{2})/)];\r\n\r\n    let theDate = new Date(\r\n      givenDate.getFullYear(),\r\n      givenDate.getMonth(),\r\n      givenDate.getDate(),\r\n      timeParts[1],\r\n      timeParts[2]\r\n    );\r\n    //Create an ISOString to store in MongoDB database\r\n    var isoDate = theDate.toISOString();\r\n\r\n    // send data to the server\r\n    fetch(`${serverUrl}/doctors/sessions/${props.doctor.doctorDetails._id}`, {\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        dateTime: isoDate,\r\n        max_patients: number,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        if (res.success === true) alert(\"session added\");\r\n        else alert(\"Error creating session, check date and time\");\r\n      })\r\n      .catch((err) => {\r\n        alert(\"Error in creating session\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Form>\r\n        <Form.Group controlId=\"sessionBuilder.DateSelect\">\r\n          <Form.Label>Date: </Form.Label>\r\n          <Form.Control\r\n            onChange={(val) => setDate(val.target.value)}\r\n            type=\"date\"\r\n          ></Form.Control>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"sessionBuilder.ControlSelect2\">\r\n          <Form.Label>Time: </Form.Label>\r\n          <Form.Control\r\n            onChange={(val) => setTime(val.target.value)}\r\n            type=\"time\"\r\n            multiple\r\n          ></Form.Control>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"sessionBuilder.ControlTextarea1\">\r\n          <Form.Label>Maximum number of patients:</Form.Label>\r\n          <Form.Control\r\n            onChange={(val) => setNumber(val.target.value)}\r\n            type=\"number\"\r\n            placeholder=\"25\"\r\n          />\r\n        </Form.Group>\r\n        <Button variant=\"primary\" onClick={createSession}>\r\n          Create\r\n        </Button>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  doctor: state.doctor,\r\n  sessions: state.session,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(DoctorSessionBuilder);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport DoctorHeader from \"../layouts/DoctorHeader\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport DoctorUpcomingSessions from \"../layouts/DoctorUpcomingSessions\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { setDoctorInSession } from \"../../../redux/actions/doctorActions\";\r\nimport { clinicNextPatient } from \"../../../redux/actions/doctorClinicActions\";\r\nimport { setUserDoctor } from \"../../../redux/actions/authActions\";\r\nimport DoctorSessionBuilder from \"../layouts/DoctorSessionBuilder\";\r\n\r\nfunction DoctorDashboard(props) {\r\n  let sessionToday = false;\r\n  let sessionTodayVals = null;\r\n  let currentlyActiveSession = null;\r\n  let currentSessionTime = null;\r\n\r\n  const [hoursToNext, setHoursToNext] = useState(\"No sessions today\");\r\n  const [enterSessionButton, setEnterSessionButton] = useState(null);\r\n  const [currentAppointmentLink, setCurrentAppointmentLink] = useState(null);\r\n  let currentAppointments = [];\r\n\r\n  useEffect(() => {\r\n    setCurrentlyActiveSession();\r\n    calcHoursToNextSession();\r\n    if (currentlyActiveSession) {\r\n      props.clinicNextPatient(currentlyActiveSession._id);\r\n      setupAppointments();\r\n    }\r\n  }, []);\r\n\r\n  const setCurrentlyActiveSession = () => {\r\n    // check all sessions today for a session that should already have started/ should start now\r\n    props.sessions.sessions.forEach((session) => {\r\n      let today = new Date().getDate();\r\n      let sessionDate = new Date(session.session.date).getDate();\r\n      let month = new Date().getMonth();\r\n      let sessionMonth = new Date(session.session.date).getMonth();\r\n\r\n      let time = new Date().getTime();\r\n      let sessionTime = new Date(session.session.date).getTime();\r\n\r\n      if (sessionDate === today && month == sessionMonth) {\r\n        // then we have a session today, calculate the time\r\n        sessionTodayVals = ` ${new Date(\r\n          session.session.date\r\n        ).getHours()}:${new Date(session.session.date).getMinutes()} `;\r\n        sessionToday = true;\r\n\r\n        if (sessionTime <= time) {\r\n          currentlyActiveSession = session.session;\r\n          props.setDoctorInSession(session.session);\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const setupAppointments = () => {\r\n    // set the doctor's current appointments in the component state\r\n    fetch(`/doctors/appointments/next/${currentlyActiveSession._id}`)\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        // filter out completed appointments\r\n        result.appointment = result.appointment.filter((a) => {\r\n          return !a.completed;\r\n        });\r\n\r\n        let appointments = filterAndSortAppointments(result.appointment);\r\n        currentAppointments = [...appointments];\r\n        // set the link variable, to connect to the appointment\r\n        if (appointments.length > 0) {\r\n          setCurrentAppointmentLink(\r\n            <Link to={\"/room/\" + appointments[0]._id}>\r\n              <Button role=\"doctor\">ENTER CLINIC</Button>\r\n            </Link>\r\n          );\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const filterAndSortAppointments = (appointmentList) => {\r\n    // filter out completed appointments\r\n    let list = appointmentList.filter((appointment) => {\r\n      return !appointment.completed;\r\n    });\r\n\r\n    // sort the filtered appointments by number\r\n\r\n    list = list.sort((a, b) => {\r\n      if (a.patient_number > b.patient_number) return 1;\r\n      else if (b.patient_number > a.patient_number) return -1;\r\n\r\n      return 0;\r\n    });\r\n\r\n    return list;\r\n  };\r\n\r\n  // calculates the number of hours to the next session\r\n  const calcHoursToNextSession = () => {\r\n    if (sessionToday) {\r\n      setHoursToNext(`Session today at ${sessionTodayVals}`);\r\n      if (currentlyActiveSession)\r\n        setEnterSessionButton(\r\n          <Button variant=\"success\" onClick={setDoctorInSession}>\r\n            {\" \"}\r\n            Enter Session\r\n          </Button>\r\n        );\r\n    } else {\r\n      setHoursToNext(\"No sessions today\");\r\n    }\r\n  };\r\n\r\n  const setDoctorInSession = () => {\r\n    props.clinicNextPatient(currentlyActiveSession._id);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <DoctorHeader />\r\n\r\n      <h3> Upcoming Sessions </h3>\r\n      <DoctorUpcomingSessions />\r\n      <hr />\r\n      <h2> Sessions </h2>\r\n      <h3> {hoursToNext} </h3>\r\n      <hr />\r\n\r\n      <Link to=\"/doctor/clinic\">{enterSessionButton}</Link>\r\n\r\n      {currentAppointmentLink}\r\n\r\n      {/* <Link to={currentAppointmentLink}>\r\n            <Button role=\"doctor\">ENTER CLINIC</Button>\r\n            </Link> */}\r\n      <hr />\r\n      <Button> Create a new Session </Button>\r\n\r\n      <DoctorSessionBuilder />\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  doctor: state.doctor,\r\n  sessions: state.session,\r\n  clinic: state.clinic,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  clinicNextPatient,\r\n  setDoctorInSession,\r\n  setUserDoctor,\r\n})(DoctorDashboard);\r\n","import { SET_USER_DOCTOR } from '../actions/types'\r\n\r\nexport function setUserDoctor (doctorId) {\r\n    return async function (dispatch) {\r\n        \r\n                dispatch(\r\n                {\r\n                    type: SET_USER_DOCTOR\r\n                }\r\n                )\r\n    \r\n}}","import React from 'react'\r\n\r\nexport default function Video(props) {\r\n\r\n    const style = {\r\n        border: \"1px solid blue\",\r\n        width: \"50%\",\r\n        height: \"50%\"\r\n    }\r\n\r\n    return (\r\n        <video playsInline muted ref={props.stream} autoPlay style={style}/>\r\n    )\r\n}\r\n","import React, { useRef, useState, useEffect } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nexport default function DoctorNotepad(props) {\r\n  const dropDown = useRef(null);\r\n  const input = useRef(null);\r\n  const inputMedIndex = useRef()\r\n  const conditionInput = useRef(null);\r\n  const inputCondCode = useRef()\r\n  const addButton = useRef(null);\r\n\r\n  const [searchMedicineValue, setSearchMedicineValue] = useState({ value: \"\" });\r\n  const [searchConditionValue, setSearchConditionValue] = useState({\r\n    value: \"\",\r\n  });\r\n\r\n  const dropDownConditions = useRef();\r\n  const addConditionButton = useRef();\r\n\r\n  const medication = useRef({});\r\n  const conditionRef = useRef({});\r\n\r\n  const [medicationRows, setMedicationRows] = useState(null);\r\n  const [medicines, setMedicines] = useState(null);\r\n  const [medicineList, setMedicineList] = useState([]);\r\n  const [conditionRows, setConditionRows] = useState(null);\r\n  const [conditions, setConditions] = useState(null);\r\n  const [conditionList, setConditionList] = useState([]);\r\n\r\n  const confirmButton = (\r\n    <Button variant=\"warning\" onClick={() => { handleConfirm() }}>\r\n      {\" \"}\r\n      Confirm{\" \"}\r\n    </Button>\r\n  );\r\n\r\n  const [bottomButton, setBottomButton] = useState(confirmButton);\r\n\r\n  useEffect(() => {\r\n    fetchMedicineList();\r\n    fetchConditionsList();\r\n  }, []);\r\n\r\n  const fetchMedicineList = () => {\r\n    fetch(\"/medicine/list\")\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        setMedicines(getMedsList(res));\r\n        setMedicineList(res);\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error fetching medicine data\" + err);\r\n      });\r\n  };\r\n\r\n  const fetchConditionsList = () => {\r\n    fetch(\"/conditions/list\")\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        setConditions(getCondtionsList(res));\r\n        setConditionList(res);\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error fetching condition data\" + err);\r\n      });\r\n  };\r\n\r\n  function toggleFunction(e) {\r\n    e.preventDefault();\r\n    dropDown.current.classList.toggle(\"show\");\r\n    toggleButtonType();\r\n  }\r\n\r\n  const toggleFunctionCondition = (e) => {\r\n    dropDownConditions.current.classList.toggle(\"show\");\r\n    if (addConditionButton.current.innerText === \"Add Condition\") {\r\n      addConditionButton.current.innerText = \"Cancel\";\r\n      addConditionButton.current.style.backgroundColor = \"red\";\r\n    } else {\r\n      addConditionButton.current.innerText = \"Add Condition\";\r\n      addConditionButton.current.style.backgroundColor = \"#3e8e41\";\r\n    }\r\n  };\r\n\r\n  const handlePrescribe = (e) => {\r\n    if (checkValidMeds(input.current.value)) {\r\n      medication.current[input.current.value] = {\r\n        name: input.current.value,\r\n        dosage: 0,\r\n        times: 0,\r\n        beforeMeal: \"Before\",\r\n        medication_index: inputMedIndex.current\r\n      };\r\n\r\n      setMedicationRows(getRows());\r\n    }\r\n  };\r\n\r\n  const handleDiagnose = (e) => {\r\n    if (checkValidCondition(conditionInput.current.value)) {\r\n      conditionRef.current[conditionInput.current.value] = {\r\n        name: conditionInput.current.value,\r\n        condition_code: inputCondCode.current\r\n      };\r\n\r\n      setConditionRows(getConditionRows());\r\n    }\r\n  };\r\n\r\n  const checkValidCondition = (con) => {\r\n    let ans = false;\r\n    conditionList.forEach((m) => {\r\n      if (m.name == con) {\r\n        ans = true;\r\n      }\r\n    });\r\n    return ans;\r\n  };\r\n\r\n  // check if the medicine exists in the records before adding it to the prescription\r\n  const checkValidMeds = (med) => {\r\n    let ans = false;\r\n    medicineList.forEach((m) => {\r\n      if (m.name == med) {\r\n        ans = true;\r\n      }\r\n    });\r\n    return ans;\r\n  };\r\n\r\n  // when the doctor changes a dosage/ time of a prescribed medicine\r\n  const changeValue = (e, med, index) => {\r\n    medication.current[med][index] = e.target.value;\r\n  };\r\n\r\n  const handleRemove = (med) => {\r\n    delete medication.current[med];\r\n    setMedicationRows(getRows());\r\n  };\r\n\r\n  const handleRemoveCondition = (cond) => {\r\n    delete conditionRef.current[cond];\r\n    setConditionRows(getConditionRows());\r\n  };\r\n\r\n  const getMedsList = (list) => {\r\n    return list.map((med) => {\r\n      return (\r\n        <a\r\n          onClick={(e) => {\r\n            setSearchValue(e, med.index);\r\n          }}\r\n        >\r\n          {med.name}\r\n        </a>\r\n      );\r\n    });\r\n  };\r\n\r\n  const getCondtionsList = (list) => {\r\n    return list.map((cond) => {\r\n      return (\r\n        <a\r\n          onClick={(e) => {\r\n            setConditionSearchValue(e, cond.code);\r\n          }}\r\n        >\r\n          {cond.name}\r\n        </a>\r\n      );\r\n    });\r\n  };\r\n\r\n  // record the data in the database\r\n  // set the appointment status to completed\r\n  const saveMedicineData = () => {\r\n    fetch(\"/treatment_data/\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        medication: medication.current,\r\n        diagnosis: conditionRef.current,\r\n        patient_age: props.appointment.patient_age\r\n      }),\r\n    });\r\n  };\r\n\r\n  // send the prescription to the patient\r\n  const sendPrescriptionToPatient = () => {\r\n    fetch(\"/medication/\", {\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        prescription: medication.current,\r\n        date: new Date().toISOString(),\r\n        appointment_id: props.appointmentId,\r\n        patient_id: props.patientId,\r\n      }),\r\n    });\r\n  };\r\n\r\n  const getRows = () => {\r\n    return Object.keys(medication.current).map((k, v) => {\r\n      // console.log(medication.current[k])\r\n      return (\r\n        <tr>\r\n          <td>{medication.current[k].name}</td>\r\n          <td>\r\n            <input\r\n              type=\"number\"\r\n              onChange={(e) => {\r\n                changeValue(e, k, \"dosage\");\r\n              }}\r\n              placeholder=\"0\"\r\n            ></input>\r\n          </td>\r\n          <td>\r\n            <select\r\n              onChange={(e) => {\r\n                changeValue(e, k, \"beforeMeal\");\r\n              }}\r\n            >\r\n              <option value=\"Before\">Before</option>\r\n              <option value=\"After\">After</option>\r\n            </select>\r\n          </td>\r\n          <td>\r\n            <input\r\n              onChange={(e) => {\r\n                changeValue(e, k, \"times\");\r\n              }}\r\n              type=\"number\"\r\n            ></input>\r\n          </td>\r\n          <td>\r\n            <Button\r\n              variant=\"danger\"\r\n              onClick={(h) => {\r\n                handleRemove(k);\r\n              }}\r\n            >\r\n              {\" \"}\r\n              x{\" \"}\r\n            </Button>\r\n          </td>\r\n        </tr>\r\n      );\r\n    });\r\n  };\r\n\r\n  const getConditionRows = () => {\r\n    return Object.keys(conditionRef.current).map((k, v) => {\r\n      return (\r\n        <tr>\r\n          <td>{conditionRef.current[k].name}</td>\r\n          <td>\r\n            <Button\r\n              variant=\"danger\"\r\n              onClick={(h) => {\r\n                handleRemoveCondition(k);\r\n              }}\r\n            >\r\n              {\" \"}\r\n              x{\" \"}\r\n            </Button>\r\n          </td>\r\n        </tr>\r\n      );\r\n    });\r\n  };\r\n\r\n  // remove the confirm button\r\n  // send the prescription to the database (so the patient can access it)\r\n  // send the treatment info to the database for ML\r\n  const handleConfirm = () => {\r\n    setBottomButton(<h6> Prescription sent. </h6>);\r\n    sendPrescriptionToPatient();\r\n    saveMedicineData();\r\n  };\r\n\r\n  // toggles a button between active and cancel\r\n  const toggleButtonType = () => {\r\n    if (addButton.current.innerText === \"Add Medication\") {\r\n      addButton.current.innerText = \"Cancel\";\r\n      addButton.current.style.backgroundColor = \"red\";\r\n    } else {\r\n      addButton.current.innerText = \"Add Medication\";\r\n      addButton.current.style.backgroundColor = \"#3e8e41\";\r\n    }\r\n  };\r\n\r\n  // filters the list of medicine based on the letters typed by the doctor\r\n  function filterFunction(e) {\r\n    setSearchMedicineValue({ value: e.target.value });\r\n\r\n    var filter, a, i;\r\n    filter = searchMedicineValue.value.toUpperCase();\r\n    let div = dropDown.current;\r\n    a = div.getElementsByTagName(\"a\");\r\n    for (i = 0; i < a.length; i++) {\r\n      let txtValue = a[i].textContent || a[i].innerText;\r\n      if (txtValue.toUpperCase().indexOf(filter) > -1) {\r\n        a[i].style.display = \"\";\r\n      } else {\r\n        a[i].style.display = \"none\";\r\n      }\r\n    }\r\n  }\r\n\r\n  // filters the list of conditions based on the letters typed by the doctor\r\n  const filterFunctionCondition = (e) => {\r\n    setSearchConditionValue({ value: e.target.value });\r\n\r\n    var filter, a, i;\r\n    filter = searchConditionValue.value.toUpperCase();\r\n    let div = dropDownConditions.current;\r\n    a = div.getElementsByTagName(\"a\");\r\n    for (i = 0; i < a.length; i++) {\r\n      let txtValue = a[i].textContent || a[i].innerText;\r\n      if (txtValue.toUpperCase().indexOf(filter) > -1) {\r\n        a[i].style.display = \"\";\r\n      } else {\r\n        a[i].style.display = \"none\";\r\n      }\r\n    }\r\n  };\r\n\r\n  const setSearchValue = (e, medIndex) => {\r\n    input.current.value = e.target.innerText;\r\n    inputMedIndex.current = medIndex\r\n  };\r\n\r\n  const setConditionSearchValue = (e, condCode) => {\r\n    conditionInput.current.value = e.target.innerText;\r\n    inputCondCode.current = condCode\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"searchMedicine\">\r\n        <Form>\r\n          <div className=\"dropdown\">\r\n            <button\r\n              onClick={(e) => {\r\n                toggleFunction(e);\r\n              }}\r\n              className=\"dropbtn\"\r\n              ref={addButton}\r\n            >\r\n              Add Medication\r\n            </button>\r\n            <div ref={dropDown} className=\"dropdown-content\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Medication Name\"\r\n                value={searchMedicineValue.value}\r\n                onChange={filterFunction}\r\n                className=\"searchInput\"\r\n                ref={input}\r\n                onKeyUp={filterFunction}\r\n              />\r\n              {medicines}\r\n            </div>\r\n          </div>\r\n\r\n          <Button variant=\"primary\" onClick={handlePrescribe}>\r\n            PRESCRIBE\r\n          </Button>\r\n        </Form>\r\n      </div>\r\n      <div className=\"prescriptionTable\">\r\n        <Table striped bordered hover size=\"sm\">\r\n          <thead>\r\n            <tr>\r\n              <th>Medication</th>\r\n              <th>Dosage(mg)</th>\r\n              <th>Before/After Meals</th>\r\n              <th>Times/day </th>\r\n              <th> </th>\r\n            </tr>\r\n          </thead>\r\n          {/* map the values to the table body */}\r\n          <tbody>{medicationRows}</tbody>\r\n        </Table>\r\n      </div>\r\n\r\n      <div className=\"conditionTable\">\r\n        <div className=\"dropdown\">\r\n          <button\r\n            onClick={(e) => {\r\n              toggleFunctionCondition(e);\r\n            }}\r\n            className=\"dropbtn\"\r\n            ref={addConditionButton}\r\n          >\r\n            Add Condition\r\n          </button>\r\n          <div ref={dropDownConditions} className=\"dropdown-content\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Medication Name\"\r\n              value={searchConditionValue.value}\r\n              onChange={filterFunctionCondition}\r\n              className=\"searchInput\"\r\n              ref={conditionInput}\r\n            />\r\n            {conditions}\r\n          </div>\r\n        </div>\r\n\r\n        <Button variant=\"primary\" onClick={handleDiagnose}>\r\n          DIAGNOSE\r\n        </Button>\r\n        <Table striped bordered hover size=\"sm\">\r\n          <thead>\r\n            <tr>\r\n              <th>Condition</th>\r\n            </tr>\r\n          </thead>\r\n          {/* map the values to the table body */}\r\n          <tbody>{conditionRows}</tbody>\r\n        </Table>\r\n      </div>\r\n\r\n      <div>{bottomButton}</div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport io from \"socket.io-client\";\r\n// import Peer from \"peerjs\";\r\n\r\nimport Peer from \"peerjs\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Video from \"./Video\";\r\nimport { connect } from \"react-redux\";\r\nimport DoctorNotepad from \"../../layouts/DoctorNotepad\";\r\nimport { clinicNextPatient } from '../../../../redux/actions/doctorClinicActions'\r\n\r\nfunction DoctorClinic(props) {\r\n  const history = useHistory();\r\n\r\n  // const [yourID, setYourID] = useState(\"\");\r\n  const [users, setUsers] = useState({});\r\n  const [stream, setStream] = useState();\r\n  const [receivingCall, setReceivingCall] = useState(false);\r\n  const [caller, setCaller] = useState(\"\");\r\n  const [callerSignal, setCallerSignal] = useState();\r\n  const [callAccepted, setCallAccepted] = useState(false);\r\n\r\n  const userVideo = useRef();\r\n  let patientVideo;\r\n  const socket = useRef();\r\n\r\n  const currentAppointment = props.clinic.items.appointment[0]\r\n  const currentSessionId = currentAppointment.session_id;\r\n  const appointment = currentAppointment\r\n\r\n  const [currentPatientNumber, setCurrentPatientNumber] = useState(0);\r\n  const [nextAppointment, setNextAppointment] = useState(null);\r\n  // const [currentAppointment, setCurrentAppointment] = useState({});\r\n\r\n  useEffect(() => {\r\n    socket.current = io(\"/\");\r\n\r\n    // set the doctor's webcam visible to the doctor\r\n    navigator.mediaDevices\r\n      .getUserMedia({ video: true, audio: true })\r\n      .then((stream) => {\r\n        setStream(stream);\r\n        if (userVideo.current) {\r\n          userVideo.current.srcObject = stream;\r\n        }\r\n      });\r\n\r\n    // as the doctor enters the session. the list of\r\n    // appointments is sent tp the server\r\n    socket.current.emit(\"doctor joined\", {\r\n      session_id: currentSessionId,\r\n      appointments: props.clinic.items.appointment\r\n    });\r\n    \r\n\r\n    //executed when the next appointment is found or changed\r\n    socket.current.on(\"new next appointment\", (appointmentDetails) => {\r\n      console.log('new patient joined')\r\n      setNextAppointment(appointmentDetails);\r\n    });\r\n\r\n    // handling the addition of the first patient on entering the clinic\r\n    socket.current.on(\"firstpatient\", (appointment) => {\r\n      connectToNextPatient(appointment);\r\n    });\r\n\r\n    socket.current.on(\"nextPatient\", (data) => {\r\n      // setCurrentAppointment(data.next_appointment);\r\n      connectToNextPatient(data.next_appointment, data.peer);\r\n    });\r\n\r\n    socket.current.on(\"patientToConnect\", (data) => {\r\n      alert(\"fn -- patient to connect\");\r\n      connectToNextPatient(data.appointment, data.peer);\r\n    });\r\n  }, []);\r\n\r\n  function nextPatient() {\r\n    socket.current.emit(\"doctorEnterSession\", {\r\n      appointments: props.clinic.items.appointment,\r\n      // peer : thisPeer\r\n    });\r\n    socket.current.emit(\"callnextpatient\", currentSessionId);\r\n  }\r\n\r\n  function connectToNextPatient() {\r\n\r\n    setAppointmentComplete()\r\n\r\n    if (nextAppointment._id) history.push(`/room/${nextAppointment._id}`);\r\n    else {\r\n      alert(\"No more patients online\");\r\n      history.push(\"/doctor/\");\r\n    }\r\n  }\r\n\r\n  function setAppointmentComplete () {\r\n    fetch(`/appointments/complete/${currentAppointment._id}`)\r\n      .then( res => {\r\n        props.clinicNextPatient(currentSessionId)\r\n      } )\r\n      .catch(err => { console.log('error completing appointment') })\r\n  }\r\n\r\n  let UserVideo;\r\n  if (stream) {\r\n    UserVideo = <Video stream={userVideo} />;\r\n  }\r\n\r\n  // let patientVideo;\r\n  if (callAccepted) {\r\n    patientVideo = <Video stream={patientVideo} />;\r\n  }\r\n\r\n  let incomingCall;\r\n  if (receivingCall) {\r\n    incomingCall = <div></div>;\r\n  }\r\n  return (\r\n    <Container>\r\n      <h1> Dr.{props.doctor.name} Clinic </h1>\r\n      <h5> Current session id: {currentSessionId} </h5>\r\n      <h4>Patient number : {currentPatientNumber}</h4>\r\n      <div>\r\n        {/* {UserVideo}\r\n        {patientVideo} */}\r\n\r\n        <video muted ref={props.yourVid} autoPlay playsInline />\r\n        <video ref={props.otherVid} autoPlay playsInline />\r\n      </div>\r\n\r\n      <DoctorNotepad appointmentId={props.appointmentId} appointment={appointment} patientId={ props.patientId } />\r\n\r\n      <div>\r\n        <hr></hr>\r\n        <h5>Connect to Next Patient</h5>\r\n        <Button variant=\"danger\" onClick={connectToNextPatient}>\r\n          Next Patient\r\n        </Button>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  doctor: state.doctor,\r\n  sessions: state.session, // remember to remove this if unnecessary\r\n  clinic: state.clinic,\r\n});\r\n\r\nexport default connect(mapStateToProps, {clinicNextPatient})(DoctorClinic);\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport io from \"socket.io-client\";\r\n// import Peer from \"peerjs\";\r\n\r\nimport Peer from 'peerjs'\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Video from \"./Video\";\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction PatientClinic(props) {\r\n  const [yourID, setYourID] = useState(\"\");\r\n  const [users, setUsers] = useState({});\r\n  const [stream, setStream] = useState();\r\n  const [receivingCall, setReceivingCall] = useState(false);\r\n  const [caller, setCaller] = useState(\"\");\r\n  const [callerSignal, setCallerSignal] = useState();\r\n  const [callAccepted, setCallAccepted] = useState(false);\r\n\r\n  const userVideo = useRef();\r\n  const partnerVideo = useRef();\r\n  const socket = useRef();\r\n\r\n  // console.log(props.patient)\r\n  let doctorSessionId = props.patient.currentAppointment.session_id;\r\n\r\n  // expose the patient's appointment id, for the doctor to connect to\r\n  const patientPeer = new Peer(props.patient.currentAppointment._id, {\r\n    host: \"/\",\r\n    port: \"3001\"\r\n  });\r\n  // alert(patientPeer.id)\r\n  const patientVideo = useRef();\r\n  const doctorVideo = useRef();\r\n\r\n\r\n  patientPeer.on('open', id => {\r\n      alert('dev -- opening patient peer')\r\n       // emit a message that the patient has entered the session\r\n       socket.current.emit(\"patientEnterClinic\",{ appointment: props.patient.currentAppointment, peer: null})\r\n\r\n  })\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    socket.current = io(\"/\");\r\n\r\n    // setting the user camera and mic\r\n    navigator.mediaDevices\r\n      .getUserMedia({ video: true, audio: true })\r\n      .then((stream) => {\r\n        setStream(stream);\r\n        if (userVideo.current) {\r\n          userVideo.current.srcObject = stream;\r\n        }\r\n      });\r\n\r\n    socket.current.emit('patient joined', { session_id: doctorSessionId, appointment: props.patient.currentAppointment })\r\n\r\n\r\n    socket.current.on(`requestPatientConnect`, (data) => {\r\n      if (data.appointment_id == props.patient.patientAppointments[0]._id) {\r\n        // connect the patient to the doctor\r\n        socket.current.emit(\"patientEnterClinic\", {\r\n          session_id: doctorSessionId,\r\n          appointment_id: data.appointment_id\r\n        });\r\n        // acceptDoctorCall();\r\n      }\r\n    });\r\n\r\n\r\n \r\n\r\n    // \r\n    socket.current.on('requestPeer', data => {\r\n      alert(`peer sent`)\r\n      if (data.appointment._id  == props.patient.currentAppointment._id)  {\r\n        socket.current.emit(\"respondWithPeer\", { peer: null, session_id: props.patient.currentAppointment.session_id})\r\n      }\r\n    })\r\n\r\n    socket.current.on('doctorIsIn', (peer) =>{\r\n      // thatPeer = peer\r\n    })\r\n\r\n  }, []);\r\n\r\n  patientPeer.on('call', (call) => {\r\n    call.answer(stream)\r\n    alert(`The doctor is calling you`)\r\n    // call.answer(stream);\r\n    // call.on(\"stream\", (userVideoStream) => {\r\n    //   partnerVideo.current.srcObject = userVideoStream;\r\n    //   partnerVideo.addEventListener(\"loadedmetadata\", () => {\r\n    //     partnerVideo.play();\r\n    //   });\r\n    // });\r\n  });\r\n\r\n\r\n  let UserVideo;\r\n  if (stream) {\r\n    UserVideo = <Video stream={userVideo} />;\r\n  }\r\n\r\n  let PartnerVideo;\r\n  if (callAccepted) {\r\n    PartnerVideo = <Video stream={partnerVideo} />;\r\n  }\r\n\r\n  let incomingCall;\r\n  if (receivingCall) {\r\n    incomingCall = (\r\n      <div>\r\n        <h1>{caller} is calling you</h1>\r\n        {/* <button onClick={acceptCall}>Accept</button> */}\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <Container>\r\n      <h1>Clinic session - Session Id : {doctorSessionId}</h1>\r\n      <h4>Patient number : {props.patient.currentAppointment.patient_number}</h4>\r\n      <h4>appointment id : {props.patient.currentAppointment._id}</h4>\r\n      <div>\r\n        {/* {UserVideo}\r\n        {PartnerVideo} */}\r\n    \r\n    <video muted ref={props.yourVid} autoPlay playsInline />\r\n      <video ref={props.otherVid} autoPlay playsInline />\r\n\r\n      </div>\r\n\r\n      <div>{incomingCall}</div>\r\n      <div>\r\n        <Button variant=\"danger\">Leave Session</Button>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  patient: state.patient,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(PatientClinic);\r\n","import React from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\nimport {serverUrl } from '../../../globals'\r\nimport {connect} from 'react-redux'\r\n\r\n\r\nfunction SessionResultRows(props) {\r\n    console.log(props.age)\r\n    const divStyle = {\r\n        \"display\": \"flex\",\r\n        \"flexDirection\" : \"row\",\r\n        \"justifyContent\" : \"space-around\"\r\n    }\r\n\r\n    const bookSession = (session) => {\r\n        fetch(`${serverUrl}/appointments/`, {\r\n            \"method\": 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            \"body\" : JSON.stringify({\r\n                \"sessionId\" : session._id,\r\n                \"patientId\" : props.patientId,\r\n                \"age\": props.age\r\n            })\r\n        })\r\n        .then(res => res.json())\r\n        .then( res=> {\r\n            if ( res.success === true && res.available === true ) {\r\n                alert(\"Session booked successfully\")\r\n            }\r\n            else if ( res.success === true && res.available === false ) {\r\n                alert(\"All appointments booked\")\r\n            }\r\n            else {\r\n                alert(\"Error, recheck your dashbooard and try again\")\r\n            }\r\n        }  ).catch( err => { alert(\"Error confirming session, recheck your dashboard and try again\"+ err) })\r\n\r\n    }\r\n\r\n    const mappedSessions = props.sessions.map( session => {\r\n        \r\n                        const date = new Date(session.date)\r\n\r\n                        const booked = (session.appointments >= session.patient_limit);\r\n\r\n                        return(\r\n                            <div style={divStyle} key={session.id}>\r\n                                <div>{date.getDate()}/{date.getMonth() +1}/{date.getFullYear()}</div>\r\n                                <div> \r\n                                    { date.getHours() >= 10? date.getHours() :  (\"0\" +date.getHours()) } \r\n                                    :  \r\n                                    { date.getMinutes() >= 10? date.getMinutes() :  (\"0\" +date.getMinutes()) } \r\n                                </div>\r\n\r\n                                <div>\r\n                                    { session.appointments } / { session.patient_limit } bookings\r\n                                </div>\r\n\r\n                                <Button onClick={ () => {bookSession(session)}} variant={ booked? \"danger\" : \"success\" }>{ booked? \"Session Full\" : \"Book Session\" }</Button>\r\n                            </div>\r\n                        )\r\n                    } )\r\n\r\n    return (\r\n        <div>\r\n            {\r\n               mappedSessions.map(session => {\r\n                  return session\r\n               })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    patientId : state.patient.patient_id,\r\n    age: state.patient.age\r\n})\r\n\r\nexport default connect (mapStateToProps, {}) ( SessionResultRows )","import React, {useState, useEffect} from 'react'\r\nimport { serverUrl } from '../../../globals'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Card from 'react-bootstrap/Card'\r\nimport PatientHeader from '../layouts/PatientHeader'\r\nimport SessionResultRows from '../layouts/SessionResultRows'\r\nimport { connect } from 'react-redux'\r\n\r\n\r\n function PatientSearchDoctor(props) {\r\n\r\n    useEffect(() => {\r\n        searchDoctors()\r\n    }, [])\r\n\r\n    let [searchResults, setSearchResults] = useState(null)\r\n    let sr = [];\r\n    let doctorsFound = [];\r\n    const { doctorName, specialization } = props.location.state\r\n\r\n\r\n    const searchDoctors = () => {\r\n        fetch(`${serverUrl}/doctors/`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                doctorName: doctorName,\r\n                specialization: specialization\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                if (res.success === true) {\r\n                    doctorsFound = [...res.result]\r\n                    sr = setDoctorSearchResults();\r\n                    setSearchResults(sr)\r\n                } else {\r\n                    console.log('error occured')\r\n                }\r\n            })\r\n            .catch(err => { console.log(\"Error fetching doctors\" + err); })\r\n    }\r\n\r\n\r\n    const setDoctorSearchResults = () => {\r\n        return doctorsFound.map(doctorFound => {\r\n            return (\r\n                <Card key={ doctorFound._id}>\r\n                    <Card.Body>\r\n                      Dr. { doctorFound.name}\r\n                        |\r\n                        { doctorFound.specialization }\r\n                        | \r\n                        <hr></hr>\r\n                        <SessionResultRows sessions={doctorFound.doctorSessions} />\r\n                    </Card.Body>\r\n                </Card>\r\n            )\r\n        })  \r\n    }\r\n\r\n\r\n    return (\r\n        <Container>\r\n            <PatientHeader />\r\n            <h3> Searching for Dr. {doctorName} ({specialization}) </h3>\r\n            <div id=\"search-results-doctors\">\r\n                {  searchResults }\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    age: state.patient.age\r\n})\r\n\r\nexport default connect( mapStateToProps, {} )( PatientSearchDoctor )\r\n","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nexport default function Landing() {\r\n    return (\r\n        <div className='landing-div'>\r\n            <nav className=\"navbar navbar-expand-lg landing-navbar\">\r\n            <ul className=\"navbar-nav mr-auto\">\r\n                <li><Link to={'/patients'} className=\"nav-link\"> Patient Login</Link></li>\r\n                <li><Link to={'/signup'} className=\"nav-link\">Sign Up as a Patient</Link></li>\r\n                <li><Link to={'/research'} className=\"nav-link nav-link-white\">Research</Link></li>\r\n            </ul>\r\n            <Button inline>\r\n                <Link to='/doctor/login' className=\"nav-link\">\r\n                    Doctor Sign in\r\n                </Link>\r\n            </Button>\r\n            </nav>\r\n            <hr />\r\n\r\n            <div className='slogan-holder'>\r\n                <h1>\r\n                    \"We live in trying times...\"\r\n                </h1>\r\n                <h1>\r\n                    ... but a psychiatrist has never been more accessible\r\n                </h1>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import { createBrowserHistory, Location } from \"history\";\r\n\r\nconst history = createBrowserHistory();\r\n\r\nexport default history;","import React, {useState} from 'react'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Container from 'react-bootstrap/Container'\r\nimport { connect } from \"react-redux\";\r\nimport history from '../../history'\r\n\r\nimport { logPatientIn, unauthenticatePatient  } from '../../redux/actions/patientActions'\r\n\r\nfunction PatientLogin(props) {\r\n\r\n    let [email, setEmail] = useState(\"\");\r\n    let [password, setPassword ] = useState(\"\");\r\n\r\n    const loginuser = () => {\r\n\r\n\r\n        props.authenticatePatientLogin(email, password)\r\n        \r\n            \r\n    }\r\nif (props.patient.authenticated === true) {\r\n            history.push(\"/patients/\");\r\n            document.location.reload();\r\n        }\r\n    return (\r\n        <Container>\r\n            <Form>\r\n            <Form.Group controlId=\"formBasicEmail\" onChange={ e => { setEmail(e.target.value) } }>\r\n                <Form.Label>Email address</Form.Label>\r\n                <Form.Control type=\"email\" placeholder=\"Enter email\" />\r\n                <Form.Text className=\"text-muted\">\r\n                    \r\n                </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formBasicPassword\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control type=\"password\" placeholder=\"Password\" onChange={ e => { setPassword(e.target.value) } }/>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"formBasicCheckbox\">\r\n                <Form.Check type=\"checkbox\" label=\"Check me out\" />\r\n            </Form.Group>\r\n            <Button variant=\"primary\"onClick={loginuser} >\r\n                Submit\r\n            </Button  >\r\n            </Form>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    patient: state.patient\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    authenticatePatientLogin: logPatientIn,\r\n    unauthenticatePatientLogin: unauthenticatePatient,\r\n}\r\n\r\nexport default connect (mapStateToProps, mapDispatchToProps )(PatientLogin)","import React, {useState} from 'react'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Container from 'react-bootstrap/Container'\r\nimport { connect } from \"react-redux\";\r\nimport history from '../../history'\r\n\r\nimport { logDoctorIn  } from '../../redux/actions/doctorActions'\r\n\r\nfunction DoctorLogin(props) {\r\n\r\n    let [doctorId, setDoctorId] = useState(\"\");\r\n    let [password, setPassword ] = useState(\"\");\r\n\r\n    const loginuser = () => {\r\n        props.logDoctorIn(doctorId, password)\r\n    }\r\nif (props.doctor.authenticated === true) {\r\n            history.push(\"/doctor/\");\r\n            document.location.reload();\r\n        }\r\n    return (\r\n        <Container>\r\n            <Form>\r\n            <Form.Group controlId=\"formBasicEmail\" onChange={ e => { setDoctorId(e.target.value) } }>\r\n                <Form.Label>Doctor Psyconnect ID</Form.Label>\r\n                <Form.Control type=\"email\" placeholder=\"Enter email\" />\r\n                <Form.Text className=\"text-muted\">\r\n                    \r\n                </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formBasicPassword\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control type=\"password\" placeholder=\"Password\" onChange={ e => { setPassword(e.target.value) } }/>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"formBasicCheckbox\">\r\n                <Form.Check type=\"checkbox\" label=\"Check me out\" />\r\n            </Form.Group>\r\n            <Button variant=\"primary\"onClick={loginuser} >\r\n                Log In\r\n            </Button  >\r\n            </Form>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    doctor: state.doctor\r\n})\r\n\r\nexport default connect (mapStateToProps, {logDoctorIn} )(DoctorLogin)","import { SET_USER_DOCTOR } from '../actions/types'\r\n\r\nconst initialState = {\r\n    userType: 'guest'\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch(action.type) {\r\n\r\n        case SET_USER_DOCTOR : \r\n            return {\r\n                ...state,\r\n                userType : 'doctor'\r\n            }\r\n\r\n        default : \r\n            return state;\r\n    }\r\n}","import { FETCH_DOCTOR_APPOINTMENTS_TODAY } from '../actions/types'\r\n\r\nconst initialState = {\r\n    appointments : []\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch(action.type) {\r\n        \r\n        case FETCH_DOCTOR_APPOINTMENTS_TODAY : \r\n            return {\r\n                ...state,\r\n                items: action.payload\r\n            }\r\n\r\n        default : \r\n            return state;\r\n    }\r\n}","import { AUTHENTICATE_PATIENT, UNAUTHENTICATE_PATIENT, PUT_PATIENT_IN_SESSION, FETCH_PATIENT_APPOINTMENTS } from '../actions/types'\r\nimport { LOCATION_CHANGE } from 'react-router-redux'\r\n\r\nconst initialState = {\r\n    patient_id: null,\r\n    username : '',\r\n    // password: '',\r\n    authenticated : false,\r\n    inSession : false,\r\n    sessionId : null,\r\n    patientAppointments : null\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch(action.type) {\r\n\r\n        case LOCATION_CHANGE :\r\n            return {\r\n                ...state,\r\n                patient_id: action.payload.patientDetails._id,\r\n                username : action.payload.username,\r\n                // password : action.payload.password,\r\n                authenticated : action.payload.authenticated,\r\n                inSession : false\r\n            } ;\r\n            break;\r\n\r\n        case AUTHENTICATE_PATIENT : \r\n\r\n            return {\r\n                ...state,\r\n                patient_id: action.payload.patientDetails._id,\r\n                username : action.payload.username,\r\n                // password : action.payload.password,\r\n                authenticated : action.payload.authenticated,\r\n                inSession : false\r\n            } ;\r\n            break;\r\n\r\n        case UNAUTHENTICATE_PATIENT : \r\n            return {\r\n                ...state,\r\n                username : null,\r\n                patient_id: '',\r\n                // password : action.payload.password,\r\n                authenticated : false,\r\n                inSession : false\r\n            } ;\r\n            break;\r\n\r\n        case PUT_PATIENT_IN_SESSION:\r\n            return {\r\n                ...state,\r\n                username : action.payload.username,\r\n                // password : action.payload.password,\r\n                authenticated : action.payload.authenticated,\r\n                inSession : true,\r\n                currentAppointment: action.payload.currentAppointment,\r\n                sessionId : action.payload.currentAppointment.session_id,\r\n                // sessionId : action.payload.doctorId\r\n            }\r\n        break;\r\n\r\n\r\n        case 'SET_AGE':\r\n            return{\r\n                ...state,\r\n                age: action.payload\r\n            }\r\n\r\n        case FETCH_PATIENT_APPOINTMENTS:\r\n            return{\r\n                ...state,\r\n                patientAppointments: action.payload\r\n            }\r\n\r\n        default : \r\n            return state;\r\n    }\r\n}","import { AUTHENTICATE_DOCTOR, UNAUTHENTICATE_DOCTOR, START_DOCTOR_SESSION, END_DOCTOR_SESSION } from '../actions/types'\r\n\r\nconst initialState = {\r\n    username : '',\r\n    authenticated : false,\r\n    inSession : false,\r\n    sessionId : null,\r\n    doctorDetails : {}\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch(action.type) {\r\n\r\n        case AUTHENTICATE_DOCTOR : \r\n            return {\r\n                ...state,\r\n                username : action.payload.username,\r\n                // password : action.payload.password,\r\n                authenticated : action.payload.authenticated,\r\n                inSession : false,\r\n                doctorDetails : action.payload.doctorDetails\r\n            }\r\n\r\n        case UNAUTHENTICATE_DOCTOR : \r\n            return {\r\n                username : \"\",\r\n                authenticated : false,\r\n                inSession: false,\r\n                doctorDetails : {}\r\n            }\r\n\r\n\r\n        case START_DOCTOR_SESSION : \r\n            return {\r\n                ...state,\r\n                currentSessionDetails : action.payload\r\n            }\r\n        \r\n        case END_DOCTOR_SESSION : \r\n            return {\r\n                ...state,\r\n                username : action.payload.username,\r\n                // password : action.payload.password,\r\n                authenticated : action.payload.authenticated,\r\n                inSession : false,\r\n                doctorDetails : action.payload.doctorDetails\r\n            }\r\n\r\n        \r\n\r\n        default : \r\n            return state;\r\n    }\r\n}","import { CLINIC_NEXT_PATIENT } from '../actions/types'\r\n\r\nconst initialState = {\r\n    currentsessionId : null,\r\n    currentPatientId : null\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch(action.type) {\r\n        case CLINIC_NEXT_PATIENT : \r\n            return {\r\n                ...state,\r\n                items: action.payload\r\n            }\r\n\r\n        default : \r\n            return state;\r\n    }\r\n}","import { FETCH_DOCTOR_SESSIONS } from '../actions/types'\r\n\r\nconst initialState = {\r\n    sessions : []\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch(action.type) {\r\n\r\n        case FETCH_DOCTOR_SESSIONS : \r\n            return {\r\n                ...state,\r\n                sessions: action.payload\r\n            }\r\n\r\n        default : \r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport authReducer from './authReducer';\r\nimport appointmentsReducer from './appointmentsReducer';\r\nimport patientReducer from './patientReducer';\r\nimport doctorReducer from './doctorReducer';\r\nimport doctorClinicReducer from './doctorClinicReducer';\r\nimport sessionsReducer from './sessionsReducer';\r\n\r\nexport default combineReducers({\r\n    auth : authReducer,\r\n    appointments : appointmentsReducer,\r\n    session : sessionsReducer,\r\n    patient : patientReducer,\r\n    doctor : doctorReducer,\r\n    clinic : doctorClinicReducer\r\n})","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\n\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\n// const store = createStore(rootReducer,\r\n//      initialState,\r\n//      compose(\r\n//          applyMiddleware(...middleware),\r\n//          window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n//      )\r\n//      );\r\n\r\n \r\nconst persistConfig = { \r\n    key: 'root',\r\n    storage,\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\n \r\nexport default () => {\r\n  let store = createStore\r\n    (\r\n        persistedReducer,\r\n        initialState,\r\n        compose(\r\n            applyMiddleware(...middleware)\r\n            // ,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n        )\r\n    );\r\n  let persistor = persistStore(store)\r\n  return { store, persistor }\r\n}\r\n\r\n// export default store;","import * as React from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { logPatientIn } from '../../redux/actions/patientActions'\r\nimport history from '../../history'\r\n// import DoctorHeader from '../doctor/layouts/DoctorHeader';\r\n\r\nconst LoggedInPatientRoute = ({component: Component , ...otherProps}) => {\r\n\r\n  if (otherProps.patient.authenticated !== true) {\r\n    history.push(\"/patients/login\");\r\n    document.location.reload();\r\n  }\r\n  \r\n\r\n  const theComponent = () => {\r\n    if (otherProps.patient.authenticated === true) \r\n      return <Component {...otherProps} />\r\n  }\r\n\r\nreturn(\r\n\r\n  <>\r\n    <Route\r\n      render={otherProps => (\r\n        <>\r\n          { theComponent(otherProps)}\r\n        </>\r\n      )}\r\n    />\r\n  </>\r\n)\r\n\r\n      };\r\n\r\nconst mapStateToProps = (state) => ({\r\n  patient : state.patient\r\n})\r\n\r\nexport default connect (mapStateToProps, null)(LoggedInPatientRoute);\r\n\r\n","import * as React from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport history from '../../history'\r\n// import DoctorHeader from '../doctor/layouts/DoctorHeader';\r\n\r\nconst LoggedInDoctorRoute = ({component: Component , ...otherProps}) => {\r\n\r\n  if (otherProps.doctor.authenticated !== true || otherProps.auth.userType !== 'doctor') {\r\n    history.push(\"/doctor/login\");\r\n    document.location.reload();\r\n  }\r\n  \r\n  const theComponent = () => {\r\n    if (otherProps.doctor.authenticated === true) \r\n      return <Component {...otherProps} />\r\n  }\r\n\r\n  return(\r\n    <>\r\n      <Route\r\n        render={otherProps => (\r\n          <>\r\n            {theComponent()}\r\n          </>\r\n        )}\r\n      />\r\n    </>\r\n  )\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  auth : state.auth,\r\n  doctor : state.doctor\r\n})\r\n\r\nexport default connect (mapStateToProps, null)(LoggedInDoctorRoute);","import React, { useEffect, useRef, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport Peer from \"simple-peer\";\r\nimport Container from 'react-bootstrap/Container'\r\n\r\nimport { connect } from \"react-redux\";\r\nimport DoctorClinic from \"../doctor/pages/clinic/DoctorClinic\";\r\nimport PatientClinic from \"../patient/clinic/PatientClinic\";\r\n\r\nconst Room = (props) => {\r\n    const [peers, setPeers] = useState([]);\r\n    const socketRef = useRef();\r\n    const userVideo = useRef();\r\n    const peersRef = useRef([]);\r\n    const roomID = props.match.params.roomID;\r\n\r\n    const otherVideo = useRef()\r\n    const [patients, setPatients] = useState([])\r\n\r\n\r\n    const appointment_id = props.match.params.appointmentId\r\n    const patient_id =  props.clinic.items.appointment[0].patient_id\r\n    const appointment =  props.clinic.items.appointment[0]\r\n\r\n\r\n    useEffect(() => {\r\n        socketRef.current = io.connect(\"/\");\r\n\r\n        // get this user's webcam video stream\r\n        navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then(stream => {\r\n            userVideo.current.srcObject = stream;\r\n            socketRef.current.emit(\"join room\", roomID);\r\n            socketRef.current.on(\"all users\", users => {\r\n                // create an empty array to store the other peers\r\n                const peers = [];\r\n\r\n                // add each user to this empty array\r\n                users.forEach(userID => {\r\n                    const peer = createPeer(userID, socketRef.current.id, stream);\r\n                    peersRef.current.push({\r\n                        peerID: userID,\r\n                        peer,\r\n                    })\r\n                    peers.push(peer);\r\n                })\r\n\r\n                // set the peers array to the array sent\r\n                setPeers(peers);\r\n            })\r\n\r\n            socketRef.current.on(\"user joined\", payload => {\r\n                const item = peersRef.current.find(p => p.peerID === payload.callerID);\r\n                if(!item) {\r\n                console.log('user joined')\r\n                const peer = addPeer(payload.signal, payload.callerID, stream);\r\n                peersRef.current.push({\r\n                    peerID: payload.callerID,\r\n                    peer,\r\n                })\r\n                // setPeers([peer])\r\n                setPeers(users => [...users, peer]);}\r\n            });\r\n\r\n            socketRef.current.on(\"receiving returned signal\", payload => {\r\n                console.log(\"receiving returned signal\")\r\n                const item = peersRef.current.find(p => p.peerID === payload.id);\r\n                item.peer.signal(payload.signal);\r\n            });\r\n        })\r\n    }, []);\r\n\r\n    function createPeer(userToSignal, callerID, stream) {\r\n        console.log('creating peer')\r\n        const peer = new Peer({\r\n            initiator: true,\r\n            trickle: false,\r\n            config: { iceServers: [{ urls: 'stun:stun.l.google.com:19302' }, { urls: 'stun:global.stun.twilio.com:3478?transport=udp' }] },\r\n            stream,\r\n        });\r\n\r\n        peer.on(\"signal\", signal => {\r\n            console.log('sending signal')\r\n            socketRef.current.emit(\"sending signal\", { userToSignal, callerID, signal })\r\n        })\r\n\r\n        // added\r\n        peer.on('stream', stream => {\r\n            console.log('received stream')\r\n            otherVideo.current.srcObject = stream\r\n        })\r\n\r\n\r\n        return peer;\r\n    }\r\n\r\n    function addPeer(incomingSignal, callerID, stream) {\r\n        console.log('adding peer')\r\n        const peer = new Peer({\r\n            initiator: false,\r\n            trickle: false,\r\n            config: { iceServers: [{ urls: 'stun:stun.l.google.com:19302' }, { urls: 'stun:global.stun.twilio.com:3478?transport=udp' }] },\r\n            stream,\r\n        })\r\n\r\n        peer.on(\"signal\", signal => {\r\n            socketRef.current.emit(\"returning signal\", { signal, callerID })\r\n        })\r\n\r\n        // added\r\n        peer.on('stream', stream => {\r\n            otherVideo.current.srcObject = stream\r\n        })\r\n\r\n        peer.signal(incomingSignal);\r\n\r\n        return peer;\r\n    }\r\n\r\n\r\n\r\n    if (props.auth.userType === 'doctor') {\r\n        return ( <DoctorClinic yourVid={ userVideo }  otherVid={otherVideo} appointment={appointment} appointmentId= {appointment_id} patientId={patient_id} /> )\r\n    }\r\n    else {\r\n        return ( <PatientClinic  yourVid={ userVideo } otherVid={otherVideo} />)\r\n    }\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    auth : state.auth,\r\n    clinic: state.clinic\r\n})\r\n\r\nexport default connect (mapStateToProps, {})(Room);","import React from 'react'\r\nimport Peer from 'peerjs'\r\nimport DoctorClinic from '../doctor/pages/clinic/DoctorClinic'\r\nimport PatientClinic from '../patient/clinic/PatientClinic'\r\nimport { connect } from 'react-redux'\r\n\r\n\r\nfunction Clinic(props) {\r\n\r\n    let comp\r\n\r\n    if (props.auth.userType == 'doctor') {\r\n        comp = <DoctorClinic></DoctorClinic>\r\n    }\r\n    else {\r\n        // patient\r\n        comp = <PatientClinic/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {alert('test')}\r\n            {comp}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth\r\n})\r\n\r\nexport default connect ( mapStateToProps, {} )(Clinic)","import React from 'react'\r\nimport { Container, Col, Row, Button } from 'react-bootstrap'\r\nimport whiteLogo from '../../../images/logo_white.png'\r\n\r\nexport default function ResearcherDashboard() {\r\n    return (\r\n        <Row className='researcher-dashboard-body'>\r\n            <Col xs={3} className='researcher-dashboard-sidebar'>\r\n                <img className='side-nav-logo' src={whiteLogo} />\r\n                <hr/>\r\n                <hr/>\r\n                <hr/>\r\n\r\n                <Button>\r\n                    Search Medication\r\n                </Button>\r\n                <hr/>\r\n                <Button>\r\n                    Search Mental Health Conditions\r\n                </Button>\r\n                <hr/>\r\n                <Button>\r\n                    Medication Prediction\r\n                </Button>\r\n            </Col>\r\n            <Col xs={7} className='researcher-dashboard-container'>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n","import React, { useRef, useState } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport {Link} from \"react-router-dom\"\r\nimport { Container } from \"react-bootstrap\";\r\n\r\nexport default function PatientSignup(props) {\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  const dob = useRef();\r\n  const conf_password = useRef();\r\n  const password = useRef();\r\n  const email = useRef();\r\n  const name = useRef();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!verifyPassword()) {\r\n      alert(\"Passwords must match!\");\r\n      return;\r\n    }\r\n\r\n    const isodob = new Date(dob.current.value).toISOString();\r\n\r\n    fetch(\"/patient/\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        email: email.current.value,\r\n        password: password.current.value,\r\n        dob: isodob,\r\n        name: name.current.value,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        if (res.success == true) handleShow();\r\n        else alert(\"Error Signing up!\");\r\n      })\r\n      .catch( err => { alert(err) } )\r\n  };\r\n\r\n  const verifyPassword = () => {\r\n    return password.current.value === conf_password.current.value;\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <h5> Sign up to access the Psyconnectme Patient platform </h5>\r\n\r\n      <div className=\"signup-form\">\r\n        <Form>\r\n          <Form.Group controlId=\"formBasicEmail\">\r\n            <Form.Label>Your Name *</Form.Label>\r\n            <Form.Control\r\n              ref={name}\r\n              required\r\n              type=\"text\"\r\n              placeholder=\"Enter email\"\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId=\"formBasicEmail\">\r\n            <Form.Label>Email address*</Form.Label>\r\n            <Form.Control\r\n              ref={email}\r\n              required\r\n              type=\"email\"\r\n              placeholder=\"Enter email\"\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId=\"sessionBuilder.DateSelect\">\r\n            <Form.Label>Date of Birth *: </Form.Label>\r\n            <Form.Control ref={dob} required type=\"date\"></Form.Control>\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId=\"formBasicPassword\">\r\n            <Form.Label>Password*</Form.Label>\r\n            <Form.Control\r\n              ref={password}\r\n              type=\"password\"\r\n              placeholder=\"Password\"\r\n              required\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId=\"formBasicPasswordConfirm\">\r\n            <Form.Label >Confirm Password*</Form.Label>\r\n            <Form.Control\r\n              ref={conf_password}\r\n              type=\"password\"\r\n              placeholder=\"Same password\"\r\n              required\r\n            />\r\n          </Form.Group>\r\n          <Button variant=\"primary\" type=\"submit\" onClick={handleSubmit}>\r\n            Submit\r\n          </Button>\r\n        </Form>\r\n      </div>\r\n\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Success</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          You're signed up!, Press NEXT to go to the login page\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Link to=\"/patients/login\">\r\n            <Button variant=\"success\" onClick={handleClose}>\r\n              NEXT\r\n            </Button>\r\n          </Link>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport PatientDashboard from \"./components/patient/pages/PatientDashboard\";\nimport DoctorDashboard from \"./components/doctor/pages/DoctorDashboard\";\nimport DoctorClinic from \"./components/doctor/pages/clinic/DoctorClinic\";\nimport PatientClinic from \"./components/patient/clinic/PatientClinic\";\nimport PatientSearchDoctor from \"./components/patient/pages/PatientSearchDoctor\";\n\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport Landing from \"./components/general/Landing\";\nimport PatientLogin from \"./components/login/PatientLogin\";\nimport DoctorLogin from \"./components/login/DoctorLogin\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./redux/store\";\nimport LoggedInPatientRoute from \"./components/routeExtensions/LoggedInPatientRoute\";\nimport LoggedInDoctorRoute from \"./components/routeExtensions/LoggedInDoctorRoute\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport Room from \"./components/clinic/Room\";\nimport Clinic from \"./components/clinic/Clinic\";\nimport ResearcherDashboard from \"./components/researcher/pages/ResearcherDashboard\";\nimport PatientSignup from \"./components/signup/PatientSignup\";\n\nfunction App() {\n  const { store, persistor } = configureStore();\n\n  return (\n    <Provider store={store}>\n      <Router>\n        <PersistGate loading={null} persistor={persistor}>\n          <div className='app-div'>\n            <Switch>\n              <Route exact path=\"/\" component={Landing} />\n              <Route exact path=\"/patients/login\" component={PatientLogin} />\n              <LoggedInPatientRoute\n                exact\n                path=\"/patients\"\n                component={PatientDashboard}\n              />\n              <LoggedInPatientRoute\n                exact\n                path=\"/patients/searchDoctor\"\n                component={PatientSearchDoctor}\n              />\n              <LoggedInPatientRoute\n                exact\n                path=\"/patients/clinic/:docId\"\n                component={PatientClinic}\n              />\n              <Route exact path=\"/doctor/login\" component={DoctorLogin} />\n              <LoggedInDoctorRoute\n                exact\n                path=\"/doctor\"\n                component={DoctorDashboard}\n              />\n              <LoggedInDoctorRoute\n                exact\n                path=\"/doctor/clinic\"\n                component={DoctorClinic}\n              />\n              <Route path=\"/signup\" component={PatientSignup}></Route>\n              <Route path=\"/research\" component={ResearcherDashboard}></Route>\n              <Route path=\"/room/:appointmentId\" component={Room}></Route>\n              <Route\n                exact\n                path=\"/clinic/:appointmentId\"\n                component={Clinic}\n              ></Route>\n            </Switch>\n          </div>\n        </PersistGate>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}